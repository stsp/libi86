= libi86 implementation notes

:back-link: (link:../README.asciidoc[↵])

== ``<dir.h>``

:fn-microsoft-93: footnote:microsoft-93[https://archive.org/details/microsoft-dos-v-5.0-v-japanese.]
:fn-brown-00: footnote:brown-00[R. Brown et al.  Ralf Brown's Interrupt List, Jul 2000.  See in particular https://www.delorie.com/djgpp/doc/rbinter/ix/21/63.html.]

**``searchpath``, ``_searchpath``**: These functions support double-byte character sets (DBCS).  They should work properly on systems such as MS-DOS 5.0/V (Japanese){fn-microsoft-93} where file names might contain double-byte characters.

  * Note that it is the OS _kernel_ that determines whether file names may use double-byte characters.  Because of this, I have implemented DBCS support for file names separately from the _userspace_ ``LC_*`` support in `<locale.h>`.
  * `libi86` defines a function `_dos_get_dbcs_lead_table ()` which calls `int 0x21`, `%ax` =`0x6300`,{fn-brown-00} to obtain the DBCS lead byte table.   However, if the underlying C library already implements this function, `libi86` will use that implementation instead.  {back-link}

== ``<direct.h>``

**``_mkdir``, ``mkdir``**: ``libi86`` ignores any __mode__ argument that may be passed to these functions.

  * It might initially seem useful to use the __mode__ to change a newly created directory's attributes, via the ``_dos_setfileattr`` mechanism.  MS-DOS does allow one to mark a directory "read-only"; however, during actual file operations, MS-DOS still allows one to remove a "read-only" directory, or even to change such a directory's contents.  Thus, honouring the __mode__ is not very useful.  {back-link}

== ``<dos.h>``

:fn-chen-20: footnote:chen-20[R. Chen.  Why does MS-DOS put an int 20h at byte 0 of the COM file program segment?  The Old New Thing, Mar 2020.  https://devblogs.microsoft.com/oldnewthing/20200309-00/?p=103547.]
:fn-necasek-11: footnote:necasek-11[M. Necasek.  Who needs the address wraparound, anyway?  OS/2 Museum, Sep 2011.  http://www.os2museum.com/wp/who-needs-the-address-wraparound-anyway/.]

**``bdos``**: For IA-16 GCC, there is a second implementation of `bdos (`...`)` which uses the ancient `call 5` syscall interface.  This implementation exists mainly for stress-testing DOS implementations, and is likely not useful for writing new programs.

  * Use an `#assert` directive to enable this second `bdos`.  See `<dos.h>` for details.
  * `call 5` is an alternate way to invoke MS-DOS syscalls, supported to allow better compatibility with CP/M programs.{fn-chen-20}{fn-necasek-11}  Instead of calling `int 0x21` with the syscall number in `%ah`, one does a near call to `PSP:5` with the syscall number in `%cl`.  Only syscalls `0x00`—`0x24` work.
  * Note that MS-DOS's `call 5` may clobber `%al` before handing over to the actual syscall handling code.  This means that the third parameter to `bdos (`...`)` should be considered as ignored.  {back-link}

== ``<process.h>``

:fn-delorie-18: footnote:delorie-18[See CVS version 1.29 of djgpp/src/libc/dos/process/dosexec.c in the DJGPP project, at https://delorie.com/bin/cvsweb.cgi/djgpp/src/libc/dos/process/dosexec.c.]

**``spawnve (``__mode__``,`` *__path__``,`` *__argv__``,`` *__envp__``)``, ``_spawnve``, and the other ``spawn``... and ``_spawn``... functions**: ``libi86`` purposely deviates from Open Watcom's documented behaviour — and follows DJGPP's{fn-delorie-18} behaviour instead — in a few ways.  The intent is to make the functions safer to use and to reduce gotchas.

  * If the __path__ has no file extension (e.g. ``c:/path/to/foo``), then ``libi86`` will always try to look for __path__``.COM``, __path__``.EXE``, etc., before looking for __path__.
  ** (Open Watcom instead looks for __path__ before looking for __path__``.COM``, etc.)
  * ``libi86`` 's ``spawn``... functions look up the ``COMSPEC`` environment variable inside __envp__``[]``.  Only if that fails, will ``libi86`` consult the calling process's own environment (via ``getenv`` or ``environ[]``).
  * In addition, ``libi86`` 's ``spawn``...``p``... only look up the ``PATH`` variable in __envp__``[]``, and will not look up ``PATH`` in the caller's environment (unless __envp__ = ``NULL``).
  ** This allows a process to use a custom search path to locate a program, without having to doctor the process's own environment.
  ** (Open Watcom in contrast looks up both ``COMSPEC`` and ``PATH`` in the caller's environment only.)

``libi86`` supports a special ``libi86``-specific __mode__ value, ``P_WAIT | _P_RESTRICT_EXT``, which one can try to use for extra safety.  Under this mode, ``libi86`` will always make sure that

  * the program that runs has an file extension, and
  * the extension is for a type of executable file that ``libi86`` knows about.  {back-link}

== ``<libi86/stdlib.h>``

**``_fullpath``, ``_makepath``, ``_searchenv``, ``_splitpath``**: See link:#dirh[notes on ``searchpath`` and ``_searchpath``].  {back-link}
