dnl Copyright (c) 2019--2021 TK Chia
dnl
dnl Redistribution and use in source and binary forms, with or without
dnl modification, are permitted provided that the following conditions are
dnl met:
dnl
dnl   * Redistributions of source code must retain the above copyright
dnl     notice, this list of conditions and the following disclaimer.
dnl   * Redistributions in binary form must reproduce the above copyright
dnl     notice, this list of conditions and the following disclaimer in the
dnl     documentation and/or other materials provided with the distribution.
dnl   * Neither the name of the developer(s) nor the names of its
dnl     contributors may be used to endorse or promote products derived from
dnl     this software without specific prior written permission.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
dnl IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
dnl TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
dnl PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
dnl HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
dnl SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
dnl TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
dnl PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
dnl LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
dnl NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
dnl SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

AT_BANNER([[<libi86/stdlib.h> tests]])

AT_SETUP([[_psp]])
AT_LIBI86_CHECK(dnl
[[#include <i86.h>
#include <stdlib.h>
#include <libi86/stdlib.h>
int
main (void)
{
#ifdef __MSDOS__
# ifdef __FAR
  unsigned __far *psp_mem = MK_FP (_psp, 0);
  if (psp_mem[0] != 0x20cdu)
    abort ();
# else
  if (__libi86_peek (_psp, 0) != 0x20cdu)
    abort ();
# endif
  return 0;
#else
# error
#endif
}]],[[]])
AT_CLEANUP

AT_SETUP([[_osmajor, _osminor]])
AT_LIBI86_CHECK(dnl
[[#include <i86.h>
#include <stdlib.h>
#include <libi86/stdlib.h>
int
main (void)
{
#ifdef __MSDOS__
  if (_osmajor < 2)
    abort ();
  if (_osminor > 99)
    abort ();
  return 0;
#else
# error
#endif
}]],[[]])
AT_CLEANUP

AT_SETUP([[_ltoa, _ultoa, _lltoa, _ulltoa]])
AT_LIBI86_CHECK(dnl
[[#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef __GNUC__
# include <libi86/stdlib.h>
#endif
static void
test_l_ul_ll_ull (long x)
{
  char buf1[65], buf2[65];
  int radix;
  for (radix = 2; radix <= 36; ++radix)
    {
      memset (buf1, 0xf6, sizeof buf1);
      _ltoa (x, buf1, radix);
      printf ("%2d %s\n", radix, buf1);
      memset (buf2, 0xf6, sizeof buf2);
      _ultoa ((unsigned long) x, buf2, radix);
      if (strcmp (buf1, buf2) != 0)
	abort ();
      memset (buf2, 0xf6, sizeof buf2);
      _lltoa ((long long) x, buf2, radix);
      if (strcmp (buf1, buf2) != 0)
	abort ();
      memset (buf2, 0xf6, sizeof buf2);
      _ulltoa ((unsigned long long) x, buf2, radix);
      if (strcmp (buf1, buf2) != 0)
	abort ();
    }
  putchar ('\n');
}
static void
test_l_ll (long x)
{
  char buf1[65], buf2[65];
  int radix;
  for (radix = 2; radix <= 36; ++radix)
    {
      memset (buf1, 0xf6, sizeof buf1);
      memset (buf2, 0xf6, sizeof buf1);
      _ltoa (x, buf1, radix);
      _lltoa ((long long) x, buf2, radix);
      printf ("%2d %s\n   %s\n", radix, buf1, buf2);
    }
  putchar ('\n');
}
static void
test_ul_ull (unsigned long x)
{
  char buf1[65], buf2[65];
  int radix;
  for (radix = 2; radix <= 36; ++radix)
    {
      memset (buf1, 0xf6, sizeof buf1);
      _ultoa (x, buf1, radix);
      printf ("%2d %s\n", radix, buf1);
      memset (buf2, 0xf6, sizeof buf2);
      _ulltoa ((unsigned long long) x, buf2, radix);
      if (strcmp (buf1, buf2) != 0)
	abort ();
    }
  putchar ('\n');
}
static void
test_ll_ull (long long x)
{
  char buf1[65], buf2[65];
  int radix;
  for (radix = 2; radix <= 36; ++radix)
    {
      memset (buf1, 0xf6, sizeof buf1);
      _lltoa (x, buf1, radix);
      printf ("%2d %s\n", radix, buf1);
      memset (buf2, 0xf6, sizeof buf2);
      _ulltoa ((unsigned long long) x, buf2, radix);
      if (strcmp (buf1, buf2) != 0)
	abort ();
    }
  putchar ('\n');
}
static void
test_ll (long long x)
{
  char buf1[65];
  int radix;
  for (radix = 2; radix <= 36; ++radix)
    {
      memset (buf1, 0xf6, sizeof buf1);
      _lltoa (x, buf1, radix);
      printf ("%2d %s\n", radix, buf1);
    }
  putchar ('\n');
}
static void
test_ull (unsigned long long x)
{
  char buf1[65];
  int radix;
  for (radix = 2; radix <= 36; ++radix)
    {
      memset (buf1, 0xf6, sizeof buf1);
      _ulltoa (x, buf1, radix);
      printf ("%2d %s\n", radix, buf1);
    }
  putchar ('\n');
}
int
main (void)
{
  test_l_ul_ll_ull (0);
  test_l_ul_ll_ull (1);
  test_l_ll (-1);
  test_l_ul_ll_ull (2);
  test_l_ll (-2);
  test_l_ul_ll_ull (3);
  test_l_ll (-3);
  test_l_ul_ll_ull (9);
  test_l_ll (-9);
  test_l_ul_ll_ull (10);
  test_l_ll (-10);
  test_l_ul_ll_ull (11);
  test_l_ll (-11);
  test_l_ul_ll_ull (35);
  test_l_ll (-35);
  test_l_ul_ll_ull (36);
  test_l_ll (-36);
  test_l_ul_ll_ull (37);
  test_l_ll (-37);
  test_l_ul_ll_ull (LONG_MAX - 1);
  test_l_ll (LONG_MIN + 1);
  test_l_ul_ll_ull (LONG_MAX);
  test_l_ll (LONG_MIN);
  test_ll ((long long) LONG_MIN - 1);
  test_ul_ull ((unsigned long) LONG_MAX + 1);
  test_ul_ull (ULONG_MAX - 1);
  test_ul_ull (ULONG_MAX);
  test_ll_ull ((long long) ULONG_MAX + 1);
  test_ll_ull (LLONG_MAX - 1);
  test_ll (LLONG_MIN + 1);
  test_ll_ull (LLONG_MAX);
  test_ll (LLONG_MIN);
  test_ull ((unsigned long long) LLONG_MAX + 1);
  test_ull (ULLONG_MAX - 1);
  test_ull (ULLONG_MAX);
  printf ("OK\n");
  return 0;
}]],dnl
[[ 2 0
 3 0
 4 0
 5 0
 6 0
 7 0
 8 0
 9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0

 2 1
 3 1
 4 1
 5 1
 6 1
 7 1
 8 1
 9 1
10 1
11 1
12 1
13 1
14 1
15 1
16 1
17 1
18 1
19 1
20 1
21 1
22 1
23 1
24 1
25 1
26 1
27 1
28 1
29 1
30 1
31 1
32 1
33 1
34 1
35 1
36 1

 2 11111111111111111111111111111111
   1111111111111111111111111111111111111111111111111111111111111111
 3 102002022201221111210
   11112220022122120101211020120210210211220
 4 3333333333333333
   33333333333333333333333333333333
 5 32244002423140
   2214220303114400424121122430
 6 1550104015503
   3520522010102100444244423
 7 211301422353
   45012021522523134134601
 8 37777777777
   1777777777777777777777
 9 12068657453
   145808576354216723756
10 -1
   -1
11 1904440553
   335500516a429071284
12 9ba461593
   839365134a2a240713
13 535a79888
   219505a9511a867b72
14 2ca5b7463
   8681049adb03db171
15 1a20dcd80
   2c1d56b648c6cd110
16 ffffffff
   ffffffffffffffff
17 a7ffda90
   67979g60f5428010
18 704he7g3
   2d3fgb0b9cg4bd2f
19 4f5aff65
   141c8786h1ccaagg
20 3723ai4f
   b53bjh07be4dj0f
21 281d55i3
   5e8g4ggg7g56dif
22 1fj8b183
   2l4lf104353j8kf
23 1606k7ib
   1ddh88h2782i515
24 mb994af
   l12ee5fn0ji1if
25 hek2mgk
   c9c336o0mlb7ef
26 dnchbnl
   7b7n2pcniokcgf
27 b28jpdl
   4eo8hfam6fllmo
28 8pfgih3
   2nc6j26l66rhof
29 76beigf
   1n3rsh11f098rn
30 5qmcpqf
   14l9lkmo30o40f
31 4q0jto3
   nd075ib45k86f
32 3vvvvvv
   fvvvvvvvvvvvv
33 3aokq93
   b1w8p7j5q9r6f
34 2qhxjlh
   7orp63sh4dphh
35 2br45qa
   5g24a25twkwff
36 1z141z3
   3w5e11264sgsf

 2 10
 3 2
 4 2
 5 2
 6 2
 7 2
 8 2
 9 2
10 2
11 2
12 2
13 2
14 2
15 2
16 2
17 2
18 2
19 2
20 2
21 2
22 2
23 2
24 2
25 2
26 2
27 2
28 2
29 2
30 2
31 2
32 2
33 2
34 2
35 2
36 2

 2 11111111111111111111111111111110
   1111111111111111111111111111111111111111111111111111111111111110
 3 102002022201221111202
   11112220022122120101211020120210210211212
 4 3333333333333332
   33333333333333333333333333333332
 5 32244002423134
   2214220303114400424121122424
 6 1550104015502
   3520522010102100444244422
 7 211301422352
   45012021522523134134600
 8 37777777776
   1777777777777777777776
 9 12068657452
   145808576354216723755
10 -2
   -2
11 1904440552
   335500516a429071283
12 9ba461592
   839365134a2a240712
13 535a79887
   219505a9511a867b71
14 2ca5b7462
   8681049adb03db170
15 1a20dcd7e
   2c1d56b648c6cd10e
16 fffffffe
   fffffffffffffffe
17 a7ffda8g
   67979g60f542800g
18 704he7g2
   2d3fgb0b9cg4bd2e
19 4f5aff64
   141c8786h1ccaagf
20 3723ai4e
   b53bjh07be4dj0e
21 281d55i2
   5e8g4ggg7g56die
22 1fj8b182
   2l4lf104353j8ke
23 1606k7ia
   1ddh88h2782i514
24 mb994ae
   l12ee5fn0ji1ie
25 hek2mgj
   c9c336o0mlb7ee
26 dnchbnk
   7b7n2pcniokcge
27 b28jpdk
   4eo8hfam6fllmn
28 8pfgih2
   2nc6j26l66rhoe
29 76beige
   1n3rsh11f098rm
30 5qmcpqe
   14l9lkmo30o40e
31 4q0jto2
   nd075ib45k86e
32 3vvvvvu
   fvvvvvvvvvvvu
33 3aokq92
   b1w8p7j5q9r6e
34 2qhxjlg
   7orp63sh4dphg
35 2br45q9
   5g24a25twkwfe
36 1z141z2
   3w5e11264sgse

 2 11
 3 10
 4 3
 5 3
 6 3
 7 3
 8 3
 9 3
10 3
11 3
12 3
13 3
14 3
15 3
16 3
17 3
18 3
19 3
20 3
21 3
22 3
23 3
24 3
25 3
26 3
27 3
28 3
29 3
30 3
31 3
32 3
33 3
34 3
35 3
36 3

 2 11111111111111111111111111111101
   1111111111111111111111111111111111111111111111111111111111111101
 3 102002022201221111201
   11112220022122120101211020120210210211211
 4 3333333333333331
   33333333333333333333333333333331
 5 32244002423133
   2214220303114400424121122423
 6 1550104015501
   3520522010102100444244421
 7 211301422351
   45012021522523134134566
 8 37777777775
   1777777777777777777775
 9 12068657451
   145808576354216723754
10 -3
   -3
11 1904440551
   335500516a429071282
12 9ba461591
   839365134a2a240711
13 535a79886
   219505a9511a867b70
14 2ca5b7461
   8681049adb03db16d
15 1a20dcd7d
   2c1d56b648c6cd10d
16 fffffffd
   fffffffffffffffd
17 a7ffda8f
   67979g60f542800f
18 704he7g1
   2d3fgb0b9cg4bd2d
19 4f5aff63
   141c8786h1ccaage
20 3723ai4d
   b53bjh07be4dj0d
21 281d55i1
   5e8g4ggg7g56did
22 1fj8b181
   2l4lf104353j8kd
23 1606k7i9
   1ddh88h2782i513
24 mb994ad
   l12ee5fn0ji1id
25 hek2mgi
   c9c336o0mlb7ed
26 dnchbnj
   7b7n2pcniokcgd
27 b28jpdj
   4eo8hfam6fllmm
28 8pfgih1
   2nc6j26l66rhod
29 76beigd
   1n3rsh11f098rl
30 5qmcpqd
   14l9lkmo30o40d
31 4q0jto1
   nd075ib45k86d
32 3vvvvvt
   fvvvvvvvvvvvt
33 3aokq91
   b1w8p7j5q9r6d
34 2qhxjlf
   7orp63sh4dphf
35 2br45q8
   5g24a25twkwfd
36 1z141z1
   3w5e11264sgsd

 2 1001
 3 100
 4 21
 5 14
 6 13
 7 12
 8 11
 9 10
10 9
11 9
12 9
13 9
14 9
15 9
16 9
17 9
18 9
19 9
20 9
21 9
22 9
23 9
24 9
25 9
26 9
27 9
28 9
29 9
30 9
31 9
32 9
33 9
34 9
35 9
36 9

 2 11111111111111111111111111110111
   1111111111111111111111111111111111111111111111111111111111110111
 3 102002022201221111111
   11112220022122120101211020120210210211121
 4 3333333333333313
   33333333333333333333333333333313
 5 32244002423122
   2214220303114400424121122412
 6 1550104015451
   3520522010102100444244411
 7 211301422342
   45012021522523134134560
 8 37777777767
   1777777777777777777767
 9 12068657444
   145808576354216723747
10 -9
   -9
11 1904440546
   335500516a429071277
12 9ba461587
   839365134a2a240707
13 535a79880
   219505a9511a867b67
14 2ca5b7459
   8681049adb03db167
15 1a20dcd77
   2c1d56b648c6cd107
16 fffffff7
   fffffffffffffff7
17 a7ffda89
   67979g60f5428009
18 704he7fd
   2d3fgb0b9cg4bd27
19 4f5aff5g
   141c8786h1ccaag8
20 3723ai47
   b53bjh07be4dj07
21 281d55hg
   5e8g4ggg7g56di7
22 1fj8b17h
   2l4lf104353j8k7
23 1606k7i3
   1ddh88h2782i50k
24 mb994a7
   l12ee5fn0ji1i7
25 hek2mgc
   c9c336o0mlb7e7
26 dnchbnd
   7b7n2pcniokcg7
27 b28jpdd
   4eo8hfam6fllmg
28 8pfgign
   2nc6j26l66rho7
29 76beig7
   1n3rsh11f098rf
30 5qmcpq7
   14l9lkmo30o407
31 4q0jtnq
   nd075ib45k867
32 3vvvvvn
   fvvvvvvvvvvvn
33 3aokq8s
   b1w8p7j5q9r67
34 2qhxjl9
   7orp63sh4dph9
35 2br45q2
   5g24a25twkwf7
36 1z141yv
   3w5e11264sgs7

 2 1010
 3 101
 4 22
 5 20
 6 14
 7 13
 8 12
 9 11
10 10
11 a
12 a
13 a
14 a
15 a
16 a
17 a
18 a
19 a
20 a
21 a
22 a
23 a
24 a
25 a
26 a
27 a
28 a
29 a
30 a
31 a
32 a
33 a
34 a
35 a
36 a

 2 11111111111111111111111111110110
   1111111111111111111111111111111111111111111111111111111111110110
 3 102002022201221111110
   11112220022122120101211020120210210211120
 4 3333333333333312
   33333333333333333333333333333312
 5 32244002423121
   2214220303114400424121122411
 6 1550104015450
   3520522010102100444244410
 7 211301422341
   45012021522523134134556
 8 37777777766
   1777777777777777777766
 9 12068657443
   145808576354216723746
10 -10
   -10
11 1904440545
   335500516a429071276
12 9ba461586
   839365134a2a240706
13 535a7987c
   219505a9511a867b66
14 2ca5b7458
   8681049adb03db166
15 1a20dcd76
   2c1d56b648c6cd106
16 fffffff6
   fffffffffffffff6
17 a7ffda88
   67979g60f5428008
18 704he7fc
   2d3fgb0b9cg4bd26
19 4f5aff5f
   141c8786h1ccaag7
20 3723ai46
   b53bjh07be4dj06
21 281d55hf
   5e8g4ggg7g56di6
22 1fj8b17g
   2l4lf104353j8k6
23 1606k7i2
   1ddh88h2782i50j
24 mb994a6
   l12ee5fn0ji1i6
25 hek2mgb
   c9c336o0mlb7e6
26 dnchbnc
   7b7n2pcniokcg6
27 b28jpdc
   4eo8hfam6fllmf
28 8pfgigm
   2nc6j26l66rho6
29 76beig6
   1n3rsh11f098re
30 5qmcpq6
   14l9lkmo30o406
31 4q0jtnp
   nd075ib45k866
32 3vvvvvm
   fvvvvvvvvvvvm
33 3aokq8r
   b1w8p7j5q9r66
34 2qhxjl8
   7orp63sh4dph8
35 2br45q1
   5g24a25twkwf6
36 1z141yu
   3w5e11264sgs6

 2 1011
 3 102
 4 23
 5 21
 6 15
 7 14
 8 13
 9 12
10 11
11 10
12 b
13 b
14 b
15 b
16 b
17 b
18 b
19 b
20 b
21 b
22 b
23 b
24 b
25 b
26 b
27 b
28 b
29 b
30 b
31 b
32 b
33 b
34 b
35 b
36 b

 2 11111111111111111111111111110101
   1111111111111111111111111111111111111111111111111111111111110101
 3 102002022201221111102
   11112220022122120101211020120210210211112
 4 3333333333333311
   33333333333333333333333333333311
 5 32244002423120
   2214220303114400424121122410
 6 1550104015445
   3520522010102100444244405
 7 211301422340
   45012021522523134134555
 8 37777777765
   1777777777777777777765
 9 12068657442
   145808576354216723745
10 -11
   -11
11 1904440544
   335500516a429071275
12 9ba461585
   839365134a2a240705
13 535a7987b
   219505a9511a867b65
14 2ca5b7457
   8681049adb03db165
15 1a20dcd75
   2c1d56b648c6cd105
16 fffffff5
   fffffffffffffff5
17 a7ffda87
   67979g60f5428007
18 704he7fb
   2d3fgb0b9cg4bd25
19 4f5aff5e
   141c8786h1ccaag6
20 3723ai45
   b53bjh07be4dj05
21 281d55he
   5e8g4ggg7g56di5
22 1fj8b17f
   2l4lf104353j8k5
23 1606k7i1
   1ddh88h2782i50i
24 mb994a5
   l12ee5fn0ji1i5
25 hek2mga
   c9c336o0mlb7e5
26 dnchbnb
   7b7n2pcniokcg5
27 b28jpdb
   4eo8hfam6fllme
28 8pfgigl
   2nc6j26l66rho5
29 76beig5
   1n3rsh11f098rd
30 5qmcpq5
   14l9lkmo30o405
31 4q0jtno
   nd075ib45k865
32 3vvvvvl
   fvvvvvvvvvvvl
33 3aokq8q
   b1w8p7j5q9r65
34 2qhxjl7
   7orp63sh4dph7
35 2br45q0
   5g24a25twkwf5
36 1z141yt
   3w5e11264sgs5

 2 100011
 3 1022
 4 203
 5 120
 6 55
 7 50
 8 43
 9 38
10 35
11 32
12 2b
13 29
14 27
15 25
16 23
17 21
18 1h
19 1g
20 1f
21 1e
22 1d
23 1c
24 1b
25 1a
26 19
27 18
28 17
29 16
30 15
31 14
32 13
33 12
34 11
35 10
36 z

 2 11111111111111111111111111011101
   1111111111111111111111111111111111111111111111111111111111011101
 3 102002022201221110112
   11112220022122120101211020120210210210122
 4 3333333333333131
   33333333333333333333333333333131
 5 32244002423021
   2214220303114400424121122311
 6 1550104015405
   3520522010102100444244325
 7 211301422304
   45012021522523134134522
 8 37777777735
   1777777777777777777735
 9 12068657415
   145808576354216723718
10 -35
   -35
11 1904440522
   335500516a429071253
12 9ba461565
   839365134a2a2406a5
13 535a79860
   219505a9511a867b47
14 2ca5b743b
   8681049adb03db149
15 1a20dcd5b
   2c1d56b648c6cd0db
16 ffffffdd
   ffffffffffffffdd
17 a7ffda70
   67979g60f5427gg0
18 704he7e5
   2d3fgb0b9cg4bd0h
19 4f5aff49
   141c8786h1ccaaf1
20 3723ai31
   b53bjh07be4dij1
21 281d55gb
   5e8g4ggg7g56dh2
22 1fj8b16d
   2l4lf104353j8j3
23 1606k7h0
   1ddh88h2782i4mh
24 mb99495
   l12ee5fn0ji1h5
25 hek2mfb
   c9c336o0mlb7d6
26 dnchbmd
   7b7n2pcniokcf7
27 b28jpce
   4eo8hfam6flllh
28 8pfgifp
   2nc6j26l66rhn9
29 76beifa
   1n3rsh11f098qi
30 5qmcppb
   14l9lkmo30o3tb
31 4q0jtn0
   nd075ib45k85c
32 3vvvvut
   fvvvvvvvvvvut
33 3aokq82
   b1w8p7j5q9r5e
34 2qhxjkh
   7orp63sh4dpgh
35 2br45pb
   5g24a25twkweg
36 1z141y5
   3w5e11264sgrh

 2 100100
 3 1100
 4 210
 5 121
 6 100
 7 51
 8 44
 9 40
10 36
11 33
12 30
13 2a
14 28
15 26
16 24
17 22
18 20
19 1h
20 1g
21 1f
22 1e
23 1d
24 1c
25 1b
26 1a
27 19
28 18
29 17
30 16
31 15
32 14
33 13
34 12
35 11
36 10

 2 11111111111111111111111111011100
   1111111111111111111111111111111111111111111111111111111111011100
 3 102002022201221110111
   11112220022122120101211020120210210210121
 4 3333333333333130
   33333333333333333333333333333130
 5 32244002423020
   2214220303114400424121122310
 6 1550104015404
   3520522010102100444244324
 7 211301422303
   45012021522523134134521
 8 37777777734
   1777777777777777777734
 9 12068657414
   145808576354216723717
10 -36
   -36
11 1904440521
   335500516a429071252
12 9ba461564
   839365134a2a2406a4
13 535a7985c
   219505a9511a867b46
14 2ca5b743a
   8681049adb03db148
15 1a20dcd5a
   2c1d56b648c6cd0da
16 ffffffdc
   ffffffffffffffdc
17 a7ffda6g
   67979g60f5427gfg
18 704he7e4
   2d3fgb0b9cg4bd0g
19 4f5aff48
   141c8786h1ccaaf0
20 3723ai30
   b53bjh07be4dij0
21 281d55ga
   5e8g4ggg7g56dh1
22 1fj8b16c
   2l4lf104353j8j2
23 1606k7gm
   1ddh88h2782i4mg
24 mb99494
   l12ee5fn0ji1h4
25 hek2mfa
   c9c336o0mlb7d5
26 dnchbmc
   7b7n2pcniokcf6
27 b28jpcd
   4eo8hfam6flllg
28 8pfgifo
   2nc6j26l66rhn8
29 76beif9
   1n3rsh11f098qh
30 5qmcppa
   14l9lkmo30o3ta
31 4q0jtmu
   nd075ib45k85b
32 3vvvvus
   fvvvvvvvvvvus
33 3aokq81
   b1w8p7j5q9r5d
34 2qhxjkg
   7orp63sh4dpgg
35 2br45pa
   5g24a25twkwef
36 1z141y4
   3w5e11264sgrg

 2 100101
 3 1101
 4 211
 5 122
 6 101
 7 52
 8 45
 9 41
10 37
11 34
12 31
13 2b
14 29
15 27
16 25
17 23
18 21
19 1i
20 1h
21 1g
22 1f
23 1e
24 1d
25 1c
26 1b
27 1a
28 19
29 18
30 17
31 16
32 15
33 14
34 13
35 12
36 11

 2 11111111111111111111111111011011
   1111111111111111111111111111111111111111111111111111111111011011
 3 102002022201221110110
   11112220022122120101211020120210210210120
 4 3333333333333123
   33333333333333333333333333333123
 5 32244002423014
   2214220303114400424121122304
 6 1550104015403
   3520522010102100444244323
 7 211301422302
   45012021522523134134520
 8 37777777733
   1777777777777777777733
 9 12068657413
   145808576354216723716
10 -37
   -37
11 1904440520
   335500516a429071251
12 9ba461563
   839365134a2a2406a3
13 535a7985b
   219505a9511a867b45
14 2ca5b7439
   8681049adb03db147
15 1a20dcd59
   2c1d56b648c6cd0d9
16 ffffffdb
   ffffffffffffffdb
17 a7ffda6f
   67979g60f5427gff
18 704he7e3
   2d3fgb0b9cg4bd0f
19 4f5aff47
   141c8786h1ccaaei
20 3723ai2j
   b53bjh07be4diij
21 281d55g9
   5e8g4ggg7g56dh0
22 1fj8b16b
   2l4lf104353j8j1
23 1606k7gl
   1ddh88h2782i4mf
24 mb99493
   l12ee5fn0ji1h3
25 hek2mf9
   c9c336o0mlb7d4
26 dnchbmb
   7b7n2pcniokcf5
27 b28jpcc
   4eo8hfam6flllf
28 8pfgifn
   2nc6j26l66rhn7
29 76beif8
   1n3rsh11f098qg
30 5qmcpp9
   14l9lkmo30o3t9
31 4q0jtmt
   nd075ib45k85a
32 3vvvvur
   fvvvvvvvvvvur
33 3aokq80
   b1w8p7j5q9r5c
34 2qhxjkf
   7orp63sh4dpgf
35 2br45p9
   5g24a25twkwee
36 1z141y3
   3w5e11264sgrf

 2 1111111111111111111111111111110
 3 12112122212110202100
 4 1333333333333332
 5 13344223434041
 6 553032005530
 7 104134211160
 8 17777777776
 9 5478773670
10 2147483646
11 a02220280
12 4bb2308a6
13 282ba4aa9
14 1652ca930
15 c87e66b6
16 7ffffffe
17 53g7f547
18 3928g3h0
19 27c57h31
20 1db1f926
21 140h2d90
22 ikf5bf0
23 ebelf94
24 b5gge56
25 8jmdnkl
26 6oj8iom
27 5ehnck9
28 4clm98e
29 3hk7986
30 2sb6cs6
31 2d09uc0
32 1vvvvvu
33 1lsqtl0
34 1d8xqro
35 15v22ul
36 zik0zi

 2 10000000000000000000000000000001
   1111111111111111111111111111111110000000000000000000000000000001
 3 12112122212110202110
   11112220022122120101121200220221100002120
 4 2000000000000001
   33333333333333332000000000000001
 5 13344223434044
   2214220303114332024342133334
 6 553032005533
   3520522010101103412234453
 7 104134211163
   45012021522415666623411
 8 20000000001
   1777777777760000000001
 9 5478773673
   145808576347626840076
10 -2147483647
   -2147483647
11 a02220283
   3355005169526951004
12 4bb2308a9
   83936513452b00ba29
13 282ba4aac
   219505a94b67993096
14 1652ca933
   8681049ac49110641
15 c87e66b9
   2c1d56b63b3dd6949
16 80000001
   ffffffff80000001
17 53g7f54a
   67979g60a14b9bda
18 3928g3h3
   2d3fgb0b63ddd93f
19 27c57h34
   141c8786ed072cdf
20 1db1f929
   b53bjh05i32i9i9
21 140h2d93
   5e8g4ggf3f9409f
22 ikf5bf3
   2l4lf10366adj5f
23 ebelf97
   1ddh88h1fjajcf1
24 b5gge59
   l12ee5fbj31bd9
25 8jmdnko
   c9c336nh2nm8ij
26 6oj8iop
   7b7n2pcgk5bjhj
27 5ehnckc
   4eo8hfagiop92f
28 4clm98h
   2nc6j26gld58g1
29 3hk7989
   1n3rsh0qq91sjh
30 2sb6cs9
   14l9lkml4jhl29
31 2d09uc3
   nd075i8m5a8pf
32 2000001
   fvvvvvu000001
33 1lsqtl3
   b1w8p7hgufuif
34 1d8xqrr
   7orp63r3tdwnr
35 15v22uo
   5g24a24o1itjt
36 zik0zl
   3w5e1116m8fsx

 2 1111111111111111111111111111111
 3 12112122212110202101
 4 1333333333333333
 5 13344223434042
 6 553032005531
 7 104134211161
 8 17777777777
 9 5478773671
10 2147483647
11 a02220281
12 4bb2308a7
13 282ba4aaa
14 1652ca931
15 c87e66b7
16 7fffffff
17 53g7f548
18 3928g3h1
19 27c57h32
20 1db1f927
21 140h2d91
22 ikf5bf1
23 ebelf95
24 b5gge57
25 8jmdnkm
26 6oj8ion
27 5ehncka
28 4clm98f
29 3hk7987
30 2sb6cs7
31 2d09uc1
32 1vvvvvv
33 1lsqtl1
34 1d8xqrp
35 15v22um
36 zik0zj

 2 10000000000000000000000000000000
   1111111111111111111111111111111110000000000000000000000000000000
 3 12112122212110202102
   11112220022122120101121200220221100002112
 4 2000000000000000
   33333333333333332000000000000000
 5 13344223434043
   2214220303114332024342133333
 6 553032005532
   3520522010101103412234452
 7 104134211162
   45012021522415666623410
 8 20000000000
   1777777777760000000000
 9 5478773672
   145808576347626840075
10 -2147483648
   -2147483648
11 a02220282
   3355005169526951003
12 4bb2308a8
   83936513452b00ba28
13 282ba4aab
   219505a94b67993095
14 1652ca932
   8681049ac49110640
15 c87e66b8
   2c1d56b63b3dd6948
16 80000000
   ffffffff80000000
17 53g7f549
   67979g60a14b9bd9
18 3928g3h2
   2d3fgb0b63ddd93e
19 27c57h33
   141c8786ed072cde
20 1db1f928
   b53bjh05i32i9i8
21 140h2d92
   5e8g4ggf3f9409e
22 ikf5bf2
   2l4lf10366adj5e
23 ebelf96
   1ddh88h1fjajcf0
24 b5gge58
   l12ee5fbj31bd8
25 8jmdnkn
   c9c336nh2nm8ii
26 6oj8ioo
   7b7n2pcgk5bjhi
27 5ehnckb
   4eo8hfagiop92e
28 4clm98g
   2nc6j26gld58g0
29 3hk7988
   1n3rsh0qq91sjg
30 2sb6cs8
   14l9lkml4jhl28
31 2d09uc2
   nd075i8m5a8pe
32 2000000
   fvvvvvu000000
33 1lsqtl2
   b1w8p7hgufuie
34 1d8xqrq
   7orp63r3tdwnq
35 15v22un
   5g24a24o1itjs
36 zik0zk
   3w5e1116m8fsw

 2 1111111111111111111111111111111101111111111111111111111111111111
 3 11112220022122120101121200220221100002111
 4 33333333333333331333333333333333
 5 2214220303114332024342133332
 6 3520522010101103412234451
 7 45012021522415666623406
 8 1777777777757777777777
 9 145808576347626840074
10 -2147483649
11 3355005169526951002
12 83936513452b00ba27
13 219505a94b67993094
14 8681049ac4911063d
15 2c1d56b63b3dd6947
16 ffffffff7fffffff
17 67979g60a14b9bd8
18 2d3fgb0b63ddd93d
19 141c8786ed072cdd
20 b53bjh05i32i9i7
21 5e8g4ggf3f9409d
22 2l4lf10366adj5d
23 1ddh88h1fjajcem
24 l12ee5fbj31bd7
25 c9c336nh2nm8ih
26 7b7n2pcgk5bjhh
27 4eo8hfagiop92d
28 2nc6j26gld58fr
29 1n3rsh0qq91sjf
30 14l9lkml4jhl27
31 nd075i8m5a8pd
32 fvvvvvtvvvvvv
33 b1w8p7hgufuid
34 7orp63r3tdwnp
35 5g24a24o1itjr
36 3w5e1116m8fsv

 2 10000000000000000000000000000000
 3 12112122212110202102
 4 2000000000000000
 5 13344223434043
 6 553032005532
 7 104134211162
 8 20000000000
 9 5478773672
10 2147483648
11 a02220282
12 4bb2308a8
13 282ba4aab
14 1652ca932
15 c87e66b8
16 80000000
17 53g7f549
18 3928g3h2
19 27c57h33
20 1db1f928
21 140h2d92
22 ikf5bf2
23 ebelf96
24 b5gge58
25 8jmdnkn
26 6oj8ioo
27 5ehnckb
28 4clm98g
29 3hk7988
30 2sb6cs8
31 2d09uc2
32 2000000
33 1lsqtl2
34 1d8xqrq
35 15v22un
36 zik0zk

 2 11111111111111111111111111111110
 3 102002022201221111202
 4 3333333333333332
 5 32244002423134
 6 1550104015502
 7 211301422352
 8 37777777776
 9 12068657452
10 4294967294
11 1904440552
12 9ba461592
13 535a79887
14 2ca5b7462
15 1a20dcd7e
16 fffffffe
17 a7ffda8g
18 704he7g2
19 4f5aff64
20 3723ai4e
21 281d55i2
22 1fj8b182
23 1606k7ia
24 mb994ae
25 hek2mgj
26 dnchbnk
27 b28jpdk
28 8pfgih2
29 76beige
30 5qmcpqe
31 4q0jto2
32 3vvvvvu
33 3aokq92
34 2qhxjlg
35 2br45q9
36 1z141z2

 2 11111111111111111111111111111111
 3 102002022201221111210
 4 3333333333333333
 5 32244002423140
 6 1550104015503
 7 211301422353
 8 37777777777
 9 12068657453
10 4294967295
11 1904440553
12 9ba461593
13 535a79888
14 2ca5b7463
15 1a20dcd80
16 ffffffff
17 a7ffda90
18 704he7g3
19 4f5aff65
20 3723ai4f
21 281d55i3
22 1fj8b183
23 1606k7ib
24 mb994af
25 hek2mgk
26 dnchbnl
27 b28jpdl
28 8pfgih3
29 76beigf
30 5qmcpqf
31 4q0jto3
32 3vvvvvv
33 3aokq93
34 2qhxjlh
35 2br45qa
36 1z141z3

 2 100000000000000000000000000000000
 3 102002022201221111211
 4 10000000000000000
 5 32244002423141
 6 1550104015504
 7 211301422354
 8 40000000000
 9 12068657454
10 4294967296
11 1904440554
12 9ba461594
13 535a79889
14 2ca5b7464
15 1a20dcd81
16 100000000
17 a7ffda91
18 704he7g4
19 4f5aff66
20 3723ai4g
21 281d55i4
22 1fj8b184
23 1606k7ic
24 mb994ag
25 hek2mgl
26 dnchbnm
27 b28jpdm
28 8pfgih4
29 76beigg
30 5qmcpqg
31 4q0jto4
32 4000000
33 3aokq94
34 2qhxjli
35 2br45qb
36 1z141z4

 2 111111111111111111111111111111111111111111111111111111111111110
 3 2021110011022210012102010021220101220220
 4 13333333333333333333333333333332
 5 1104332401304422434310311211
 6 1540241003031030222122210
 7 22341010611245052052266
 8 777777777777777777776
 9 67404283172107811826
10 9223372036854775806
11 1728002635214590696
12 41a792678515120366
13 10b269549075433c36
14 4340724c6c71dc7a6
15 160e2ad3246366806
16 7ffffffffffffffe
17 33d3d8307b214007
18 16agh595df825fa6
19 ba643dci0ffeehg
20 5cbfjia3fh26ja6
21 2heiciiie82dh96
22 1adaibb21dckfa6
23 i6k448cf4192c1
24 acd772jnc9l0l6
25 64ie1focnn5g76
26 3igoecjbmca686
27 27c48l5b37oaoo
28 1bk39f3ah3dmq6
29 q1se8f0m04isa
30 hajppbc1fc206
31 bm03i95hia436
32 7vvvvvvvvvvvu
33 5hg4ck9jd4u36
34 3tdtk1v8j6tpo
35 2pijmikexrxp6
36 1y2p0ij32e8e6

 2 1000000000000000000000000000000000000000000000000000000000000001
 3 2021110011022210012102010021220101221000
 4 20000000000000000000000000000001
 5 1104332401304422434310311214
 6 1540241003031030222122213
 7 22341010611245052052302
 8 1000000000000000000001
 9 67404283172107811830
10 -9223372036854775807
11 1728002635214590699
12 41a792678515120369
13 10b269549075433c39
14 4340724c6c71dc7a9
15 160e2ad3246366809
16 8000000000000001
17 33d3d8307b21400a
18 16agh595df825fa9
19 ba643dci0ffeei0
20 5cbfjia3fh26ja9
21 2heiciiie82dh99
22 1adaibb21dckfa9
23 i6k448cf4192c4
24 acd772jnc9l0l9
25 64ie1focnn5g79
26 3igoecjbmca689
27 27c48l5b37oap0
28 1bk39f3ah3dmq9
29 q1se8f0m04isd
30 hajppbc1fc209
31 bm03i95hia439
32 8000000000001
33 5hg4ck9jd4u39
34 3tdtk1v8j6tpr
35 2pijmikexrxp9
36 1y2p0ij32e8e9

 2 111111111111111111111111111111111111111111111111111111111111111
 3 2021110011022210012102010021220101220221
 4 13333333333333333333333333333333
 5 1104332401304422434310311212
 6 1540241003031030222122211
 7 22341010611245052052300
 8 777777777777777777777
 9 67404283172107811827
10 9223372036854775807
11 1728002635214590697
12 41a792678515120367
13 10b269549075433c37
14 4340724c6c71dc7a7
15 160e2ad3246366807
16 7fffffffffffffff
17 33d3d8307b214008
18 16agh595df825fa7
19 ba643dci0ffeehh
20 5cbfjia3fh26ja7
21 2heiciiie82dh97
22 1adaibb21dckfa7
23 i6k448cf4192c2
24 acd772jnc9l0l7
25 64ie1focnn5g77
26 3igoecjbmca687
27 27c48l5b37oaop
28 1bk39f3ah3dmq7
29 q1se8f0m04isb
30 hajppbc1fc207
31 bm03i95hia437
32 7vvvvvvvvvvvv
33 5hg4ck9jd4u37
34 3tdtk1v8j6tpp
35 2pijmikexrxp7
36 1y2p0ij32e8e7

 2 1000000000000000000000000000000000000000000000000000000000000000
 3 2021110011022210012102010021220101220222
 4 20000000000000000000000000000000
 5 1104332401304422434310311213
 6 1540241003031030222122212
 7 22341010611245052052301
 8 1000000000000000000000
 9 67404283172107811828
10 -9223372036854775808
11 1728002635214590698
12 41a792678515120368
13 10b269549075433c38
14 4340724c6c71dc7a8
15 160e2ad3246366808
16 8000000000000000
17 33d3d8307b214009
18 16agh595df825fa8
19 ba643dci0ffeehi
20 5cbfjia3fh26ja8
21 2heiciiie82dh98
22 1adaibb21dckfa8
23 i6k448cf4192c3
24 acd772jnc9l0l8
25 64ie1focnn5g78
26 3igoecjbmca688
27 27c48l5b37oaoq
28 1bk39f3ah3dmq8
29 q1se8f0m04isc
30 hajppbc1fc208
31 bm03i95hia438
32 8000000000000
33 5hg4ck9jd4u38
34 3tdtk1v8j6tpq
35 2pijmikexrxp8
36 1y2p0ij32e8e8

 2 1000000000000000000000000000000000000000000000000000000000000000
 3 2021110011022210012102010021220101220222
 4 20000000000000000000000000000000
 5 1104332401304422434310311213
 6 1540241003031030222122212
 7 22341010611245052052301
 8 1000000000000000000000
 9 67404283172107811828
10 9223372036854775808
11 1728002635214590698
12 41a792678515120368
13 10b269549075433c38
14 4340724c6c71dc7a8
15 160e2ad3246366808
16 8000000000000000
17 33d3d8307b214009
18 16agh595df825fa8
19 ba643dci0ffeehi
20 5cbfjia3fh26ja8
21 2heiciiie82dh98
22 1adaibb21dckfa8
23 i6k448cf4192c3
24 acd772jnc9l0l8
25 64ie1focnn5g78
26 3igoecjbmca688
27 27c48l5b37oaoq
28 1bk39f3ah3dmq8
29 q1se8f0m04isc
30 hajppbc1fc208
31 bm03i95hia438
32 8000000000000
33 5hg4ck9jd4u38
34 3tdtk1v8j6tpq
35 2pijmikexrxp8
36 1y2p0ij32e8e8

 2 1111111111111111111111111111111111111111111111111111111111111110
 3 11112220022122120101211020120210210211212
 4 33333333333333333333333333333332
 5 2214220303114400424121122424
 6 3520522010102100444244422
 7 45012021522523134134600
 8 1777777777777777777776
 9 145808576354216723755
10 18446744073709551614
11 335500516a429071283
12 839365134a2a240712
13 219505a9511a867b71
14 8681049adb03db170
15 2c1d56b648c6cd10e
16 fffffffffffffffe
17 67979g60f542800g
18 2d3fgb0b9cg4bd2e
19 141c8786h1ccaagf
20 b53bjh07be4dj0e
21 5e8g4ggg7g56die
22 2l4lf104353j8ke
23 1ddh88h2782i514
24 l12ee5fn0ji1ie
25 c9c336o0mlb7ee
26 7b7n2pcniokcge
27 4eo8hfam6fllmn
28 2nc6j26l66rhoe
29 1n3rsh11f098rm
30 14l9lkmo30o40e
31 nd075ib45k86e
32 fvvvvvvvvvvvu
33 b1w8p7j5q9r6e
34 7orp63sh4dphg
35 5g24a25twkwfe
36 3w5e11264sgse

 2 1111111111111111111111111111111111111111111111111111111111111111
 3 11112220022122120101211020120210210211220
 4 33333333333333333333333333333333
 5 2214220303114400424121122430
 6 3520522010102100444244423
 7 45012021522523134134601
 8 1777777777777777777777
 9 145808576354216723756
10 18446744073709551615
11 335500516a429071284
12 839365134a2a240713
13 219505a9511a867b72
14 8681049adb03db171
15 2c1d56b648c6cd110
16 ffffffffffffffff
17 67979g60f5428010
18 2d3fgb0b9cg4bd2f
19 141c8786h1ccaagg
20 b53bjh07be4dj0f
21 5e8g4ggg7g56dif
22 2l4lf104353j8kf
23 1ddh88h2782i515
24 l12ee5fn0ji1if
25 c9c336o0mlb7ef
26 7b7n2pcniokcgf
27 4eo8hfam6fllmo
28 2nc6j26l66rhof
29 1n3rsh11f098rn
30 14l9lkmo30o40f
31 nd075ib45k86f
32 fvvvvvvvvvvvv
33 b1w8p7j5q9r6f
34 7orp63sh4dphh
35 5g24a25twkwff
36 3w5e11264sgsf

OK
]])
AT_CLEANUP

AT_SETUP([[_makepath]])
AT_LIBI86_CHECK(dnl
[[#include <errno.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <libi86/stdlib.h>
#include <string.h>
static void
check (unsigned test_num, bool should_error_p, const char *good_path,
       const char *drv, const char *dir, const char *fname, const char *ext)
{
  char path[_MAX_PATH];
  int res;
  memset (path, 0xf6, sizeof path);
  res = _makepath (path, drv, dir, fname, ext);
  if (should_error_p)
    {
      if (! res)
	abort ();
      /* path[] should be a valid string with a null terminator somewhere. */
      if (! memchr (path, 0, _MAX_PATH))
	abort ();
    }
  else
    {
      if (res)
	abort ();
      /* path[] should be the same as good_path[] (modulo letter case). */
      if (strcasecmp (path, good_path) != 0)
	abort ();
    }
  printf ("%u OK\n", test_num);
}
int
main (void)
{
#ifdef __MSDOS__
  char badness[_MAX_PATH];
  memset (badness, 0xf6, sizeof badness);
  check (1,  false, "\\", NULL, "\\", NULL, NULL);
  check (2,  false, "/", NULL, "/", NULL, NULL);
  check (3,  false, "foo", NULL, NULL, "foo", NULL);
  check (4,  false, "foo.", NULL, NULL, "Foo", ".");
  check (5,  false, "foo.bar", NULL, NULL, "foO", ".bAr");
  check (6,  false, "foo.bar", NULL, NULL, "fOo", "Bar");
  check (7,  false, "foo.bar/baz", NULL, "foo.Bar/", "baz", NULL);
  check (8,  false, "foo.bar\\baz", NULL, "foo.bar\\", "BAZ", NULL);
  check (9,  false, "foo.bar\\baz", NULL, "foo.bar", "BAZ", NULL);
  check (10, false, "\\foo.bar\\ba?z", NULL, "\\foo.Bar", "ba?z", NULL);
  check (11, false, "/foo.bar/ba?z", NULL, "/foo.bar", "BA?Z", NULL);
  check (12, false, "\\foo.Bar/*.*", NULL, "\\foo.bar/", "*", "*");
  check (13, false, "/foo.bar\\*.*", NULL, "/foo.bar\\", "*", ".*");
  check (14, false, "\\foo/Bar/*.*", NULL, "\\foo/bar/", "*", "*");
  check (15, false, "/foo\\bar\\*.*", NULL, "/foo\\bar\\", "*", ".*");
  check (16, false, "a:\\", "a:", "\\", NULL, NULL);
  check (17, false, "b:/", "B", "/", NULL, NULL);
  check (18, true, NULL, "?", NULL, NULL, NULL);
  check (19, true, NULL, "\\\\volume\\", NULL, NULL, NULL);
  check (20, true, NULL, "//volume/", NULL, NULL, NULL);
  check (21, false, "y:/foo\\bar/baz.qux/quux*.q?u",
		    "y:", "/foo\\bar/baz.qux", "quux*", "q?u");
  check (22, true, NULL, badness, badness, badness, badness);
  check (23, true, NULL, NULL, badness, badness, badness);
  check (24, true, NULL, NULL, NULL, badness, badness);
  check (25, true, NULL, NULL, NULL, NULL, badness);
  check (26, true, NULL, NULL, NULL, badness, NULL);
  check (27, true, NULL, NULL, badness, NULL, NULL);
  check (28, true, NULL, badness, NULL, NULL, NULL);
#else
# error
#endif
}]],[[1 OK
2 OK
3 OK
4 OK
5 OK
6 OK
7 OK
8 OK
9 OK
10 OK
11 OK
12 OK
13 OK
14 OK
15 OK
16 OK
17 OK
18 OK
19 OK
20 OK
21 OK
22 OK
23 OK
24 OK
25 OK
26 OK
27 OK
28 OK
]])
AT_CLEANUP

AT_SETUP([[_splitpath]])
AT_LIBI86_CHECK(dnl
[[#include <stdio.h>
#include <stdlib.h>
#include <libi86/stdlib.h>
#include <string.h>
static void
check (unsigned test_num, const char *path, const char *good_drv,
       const char *good_dir, const char *good_fname, const char *good_ext)
{
  char drv[_MAX_DRIVE], dir[_MAX_DIR], fname[_MAX_FNAME], ext[_MAX_EXT];
  memset (drv, 0xf6, sizeof drv);
  memset (dir, 0xf6, sizeof dir);
  memset (fname, 0xf6, sizeof fname);
  memset (ext, 0xf6, sizeof ext);
  _splitpath (path, drv, dir, fname, ext);
  if (strcasecmp (drv, good_drv) != 0
      || strcasecmp (dir, good_dir) != 0
      || strcasecmp (fname, good_fname) != 0
      || strcasecmp (ext, good_ext) != 0)
    abort ();
  printf ("%u OK\n", test_num);
}
int
main (void)
{
#ifdef __MSDOS__
  check (1,  "\\", "", "\\", "", "");
  check (2,  "/", "", "/", "", "");
  check (3,  "foo", "", "", "foo", "");
  check (4,  "Foo.", "", "", "foo", ".");
  check (5,  "foO.bAr", "", "", "foo", ".bar");
  check (6,  "/Foo.", "", "/", "foo", ".");
  check (7,  "\\foO.bAr", "", "\\", "foo", ".bar");
  check (8,  "foo.Bar/", "", "foo.bar/", "", "");
  check (9,  "foo.bar\\", "", "foo.bar\\", "", "");
  check (10, "/foo.Bar/", "", "/foo.bar/", "", "");
  check (11,  "\\foo.bar\\", "", "\\foo.bar\\", "", "");
  check (12, "foo.Bar/baz", "", "foo.bar/", "baz", "");
  check (13, "foo.bar\\BAZ", "", "foo.bar\\", "baz", "");
  check (14, "\\foo.Bar/ba?z", "", "\\foo.bar/", "ba?z", "");
  check (15, "/foo.bar\\BA?Z", "", "/foo.bar\\", "ba?z", "");
  check (16, "\\foo.Bar/*.*", "", "\\foo.bar/", "*", ".*");
  check (17, "/foo.bar\\*.*", "", "/foo.bar\\", "*", ".*");
  check (18, "\\foo/Bar/*.*", "", "\\foo/bar/", "*", ".*");
  check (19, "/foo\\bar\\*.*", "", "/foo\\bar\\", "*", ".*");
  check (20, "a:\\", "a:", "\\", "", "");
  check (21, "B:/", "b:", "/", "", "");
  check (22, "c:foo", "c:", "", "foo", "");
  check (23, "D:foo.baR", "d:", "", "foo", ".bar");
  check (24, "e:/foo", "e:", "/", "foo", "");
  check (25, "F:\\foo.baR", "f:", "\\", "foo", ".bar");
  check (26, "g:foo\\", "g:", "foo\\", "", "");
  check (27, "H:foo.baR/", "h:", "foo.bar/", "", "");
  check (28, "i:/foo\\", "i:", "/foo\\", "", "");
  check (29, "J:\\foo.baR/", "j:", "\\foo.bar/", "", "");
  check (30, "y:/foo\\bar/baz.qux\\quux*.q?uuux",
	     "y:", "/foo\\bar/baz.qux\\", "quux*", ".q?u");
  check (31, "quuuuuuuuuux", "", "", "quuuuuuu", "");
#else
# error
#endif
}]],[[1 OK
2 OK
3 OK
4 OK
5 OK
6 OK
7 OK
8 OK
9 OK
10 OK
11 OK
12 OK
13 OK
14 OK
15 OK
16 OK
17 OK
18 OK
19 OK
20 OK
21 OK
22 OK
23 OK
24 OK
25 OK
26 OK
27 OK
28 OK
29 OK
30 OK
31 OK
]])
AT_CLEANUP
