dnl Copyright (c) 2022 TK Chia
dnl
dnl Redistribution and use in source and binary forms, with or without
dnl modification, are permitted provided that the following conditions are
dnl met:
dnl
dnl   * Redistributions of source code must retain the above copyright
dnl     notice, this list of conditions and the following disclaimer.
dnl   * Redistributions in binary form must reproduce the above copyright
dnl     notice, this list of conditions and the following disclaimer in the
dnl     documentation and/or other materials provided with the distribution.
dnl   * Neither the name of the developer(s) nor the names of its
dnl     contributors may be used to endorse or promote products derived from
dnl     this software without specific prior written permission.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
dnl IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
dnl TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
dnl PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
dnl HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
dnl SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
dnl TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
dnl PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
dnl LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
dnl NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
dnl SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

AT_BANNER([[<process.h> tests]])

AT_SETUP([[_getpid]])
AT_LIBI86_CHECK_FOR_NEAR_DATA_MODEL(dnl
[[#include <sys/types.h>
#include <process.h>
void abort (void);
int
main (void)
{
  pid_t pid = _getpid ();
  if (pid == 0)
    abort ();
  if (sizeof (pid_t) > sizeof (int) && pid < 0)
    abort ();
  pid = __libi86_getpid ();
  if (pid == 0)
    abort ();
  if (sizeof (pid_t) > sizeof (int) && pid < 0)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_spawnv, _spawnve]])
AT_LIBI86_CHECK(dnl
[[#include <process.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
void abort (void);
int
main (int argc, char **argv)
{
  const char *prog = argv[0];
  const char *kid1_argv[] = { NULL, "/foo", "h3llo", "w0rld!", NULL };
  const char * const kid1_envp[] = { "VINCENT=van gogh", NULL };
  const char *kid2_argv[] = { NULL, "/bar", NULL };
  if (argc > 1)
    {
      int i;
      char *vincent;

      for (i = 1; i < argc; ++i)
	puts (argv[i]);
      vincent = getenv ("VINCENT");
      if (vincent)
	{
	  fputs ("vincent = ", stdout);
	  puts (vincent);
	}
      return 0xe5;
    }
  kid1_argv[0] = kid2_argv[0] = prog;
  if (_spawnve (_P_WAIT, prog, kid1_argv, kid1_envp) != (pid_t) 0x00e5)
    abort ();
  if (putenv ("VINCENT=lombardi") != 0)
    abort ();
  if (_spawnv (_P_WAIT, prog, kid2_argv) != (pid_t) 0x00e5)
    abort ();
  puts ("yo");
  return 0;
}]],[[/foo
h3llo
w0rld!
vincent = van gogh
/bar
vincent = lombardi
yo
]])
dnl ACK does not properly handle quoted arguments (yet).  -- tkchia 20220717
if test yes = "$ac_compiler_gnu"; then
AT_LIBI86_CHECK(dnl
[[#include <process.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
void abort (void);
int
main (int argc, char **argv)
{
  const char *prog = argv[0];
  const char *kid_argv[] = { NULL, "/foo", "h3llo w0rld",
			     "!hola mundo!", NULL };
  const char * const kid_envp[] = { "VINCENT=van gogh", NULL };
  if (argc > 1)
    {
      int i;
      char *vincent;

      for (i = 1; i < argc; ++i)
	puts (argv[i]);
      vincent = getenv ("VINCENT");
      if (vincent)
	{
	  fputs ("vincent = ", stdout);
	  puts (vincent);
	}
      return 0xe5;
    }
  kid_argv[0] = prog;
  if (_spawnve (_P_WAIT, prog, kid_argv, kid_envp) != (pid_t) 0x00e5)
    abort ();
  puts ("yo");
  return 0;
}]],[[/foo
h3llo w0rld
!hola mundo!
vincent = van gogh
yo
]])
fi
AT_LIBI86_CHECK_WITH_BAT_FILE(dnl
[[#include <process.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
void abort (void);
int
main (int argc, char **argv)
{
  const char *prog = "./" BAT_FILE_MINUS_EXT;
  const char *kid_argv[] = { NULL, "/foo", "victor", "--bar", "::hugo", NULL };
  const char * const kid_envp[] = { "VINCENT=van gogh", NULL };
  kid_argv[0] = prog;
  if (_spawnve (_P_WAIT, prog, kid_argv, kid_envp) != (pid_t) 0)
    abort ();
  puts ("yo");
  return 0;
}]],dnl
[[@echo %1
@echo %2
@echo %3
@echo %4
@echo "%5"
@echo vincent = %VINCENT%
]],dnl
[[/foo
victor
--bar
::hugo
""
vincent = van gogh
yo
]])
AT_CLEANUP

AT_SETUP([[_spawnvp]])
AT_LIBI86_CHECK_WITH_BAT_FILE(dnl
[[#include <direct.h>
#include <process.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
void abort (void);
int
main (int argc, char **argv)
{
  const char * const kid_argv[] = { BAT_FILE_MINUS_EXT, NULL };
  _mkdir ("one");
  if (_chdir ("one") != 0)
    abort ();
  if (putenv ("PATH=..") != 0)
    abort ();
  if (putenv ("VINCENT=van gogh") != 0)
    abort ();
  if (_spawnvp (_P_WAIT, kid_argv[0], kid_argv) != (pid_t) 0)
    abort ();
  if (chdir ("..") != 0)
    abort ();
  _rmdir ("one");
  puts ("yo");
  return 0;
}]],dnl
[[@echo vincent = %VINCENT%
]],dnl
[[vincent = van gogh
yo
]])
AT_CLEANUP

AT_SETUP([[_spawnvpe]])
AT_LIBI86_CHECK_WITH_BAT_FILE(dnl
[[#include <direct.h>
#include <process.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
void abort (void);
int
main (int argc, char **argv)
{
  const char * const kid1_argv[] = { BAT_FILE_MINUS_EXT, NULL },
	     * const kid1_envp[] = { "PATH=..", "VINCENT=van gogh", NULL },
	     * const kid2_argv[] = { "four.bat", "six", NULL },
	     * const kid2_envp[] = { "PATH=two", NULL },
	     * const kid3_argv[] = { "five", "seven", "ten", NULL },
	     * const kid3_envp[] = { "PATH=../two;..\\three", NULL },
	     * const kid4_argv[] = { "four", "eight", NULL },
	     * const kid4_envp[] = { "PATH=../three", NULL };
  _mkdir ("one");
  if (_chdir ("one") != 0)
    abort ();
  if (_spawnvpe (_P_WAIT, kid1_argv[0], kid1_argv, kid1_envp) != (pid_t) 0)
    abort ();
  if (_spawnvpe (_P_WAIT, kid2_argv[0], kid2_argv, kid2_envp) != (pid_t) 0)
    abort ();
  if (_chdir ("nine") != 0)
    abort ();
  if (_spawnvpe (_P_WAIT, kid3_argv[0], kid3_argv, kid3_envp) != (pid_t) 0)
    abort ();
  if (_spawnvpe (_P_WAIT, kid4_argv[0], kid4_argv, kid4_envp) != (pid_t) -1)
    abort ();
  if (chdir ("../..") != 0)
    abort ();
  remove ("one/two/four.bat");
  _rmdir ("one/two");
  remove ("one/three/five.bat");
  _rmdir ("one/three");
  _rmdir ("one/nine");
  _rmdir ("one");
  puts ("yo");
  return 0;
}]],dnl
[[@echo off
mkdir two
mkdir three
mkdir nine
echo @echo %%1 hello>two\four.bat
echo @echo %%2 world>three\five.bat
echo vincent = %VINCENT%
]],dnl
[[vincent = van gogh
six hello
ten world
yo
]])
AT_CLEANUP

AT_SETUP([[_spawnl, _spawnle]])
AT_LIBI86_CHECK(dnl
[[#include <process.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
void abort (void);
int
main (int argc, char **argv)
{
  const char *prog = argv[0];
  const char * const kid_envp[] = { "VINCENT=van gogh", NULL };
  if (argc > 1)
    {
      int i;
      char *vincent;

      for (i = 1; i < argc; ++i)
	puts (argv[i]);
      vincent = getenv ("VINCENT");
      if (vincent)
	{
	  fputs ("vincent = ", stdout);
	  puts (vincent);
	}
      return 0xe5;
    }
  if (_spawnle (_P_WAIT, prog, prog, "/foo", "h3llo", "w0rld!", NULL,
		kid_envp) != (pid_t) 0x00e5)
    abort ();
  if (putenv ("VINCENT=lombardi") != 0)
    abort ();
  if (_spawnl (_P_WAIT, prog, prog, "/bar", NULL) != (pid_t) 0x00e5)
    abort ();
  puts ("yo");
  return 0;
}]],[[/foo
h3llo
w0rld!
vincent = van gogh
/bar
vincent = lombardi
yo
]])
AT_CLEANUP

AT_SETUP([[_spawnlp]])
AT_LIBI86_CHECK_WITH_BAT_FILE(dnl
[[#include <direct.h>
#include <process.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
void abort (void);
int
main (int argc, char **argv)
{
  static const char prog[] = BAT_FILE_MINUS_EXT;
  _mkdir ("one");
  if (_chdir ("one") != 0)
    abort ();
  if (putenv ("PATH=..") != 0)
    abort ();
  if (putenv ("VINCENT=van gogh") != 0)
    abort ();
  if (_spawnlp (_P_WAIT, prog, prog, "hello", NULL) != (pid_t) 0)
    abort ();
  if (chdir ("..") != 0)
    abort ();
  _rmdir ("one");
  puts ("yo");
  return 0;
}]],dnl
[[@echo %1
@echo vincent = %VINCENT%
]],dnl
[[hello
vincent = van gogh
yo
]])
AT_CLEANUP

AT_SETUP([[_spawnlpe]])
AT_LIBI86_CHECK_WITH_BAT_FILE(dnl
[[#include <direct.h>
#include <process.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
void abort (void);
int
main (int argc, char **argv)
{
  static const char prog[] = BAT_FILE_MINUS_EXT;
  const char * const kid_envp[] = { "PATH=..", "VINCENT=van gogh", NULL };
  _mkdir ("one");
  if (_chdir ("one") != 0)
    abort ();
  if (_spawnlpe (_P_WAIT, prog, prog, NULL, kid_envp) != (pid_t) 0)
    abort ();
  if (chdir ("..") != 0)
    abort ();
  _rmdir ("one");
  puts ("yo");
  return 0;
}]],dnl
[[@echo "%1"
@echo vincent = %VINCENT%
]],dnl
[[""
vincent = van gogh
yo
]])
AT_CLEANUP

AT_SETUP([[system]])
AT_LIBI86_CHECK_WITH_BAT_FILE(dnl
[[#include <process.h>
#include <stdlib.h>
void abort (void);
int
main (int argc, char **argv)
{
  const char *cmd_line = BAT_FILE_MINUS_EXT " /foo victor --bar ::hugo";
  if (system (cmd_line) != 0)
    abort ();
  puts ("yo");
  return 0;
}]],dnl
[[@echo %1
@echo %2
@echo %3
@echo %4
@echo "%5"
]],dnl
[[/foo
victor
--bar
::hugo
""
yo
]])
AT_CLEANUP
