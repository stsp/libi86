dnl Copyright (c) 2019 TK Chia
dnl
dnl This file is free software; you can redistribute it and/or modify it
dnl under the terms of the GNU Lesser General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public License
dnl along with this program; see the file COPYING2.LIB.  If not see
dnl <http://www.gnu.org/licenses/>.

AT_BANNER([[<libi86/string.h> tests]])

AT_SETUP([[_fmemcpy]])
AT_LIBI86_CHECK_FOR_SMALL_MODEL_OR_ABOVE_NONDPMIABLE(dnl
[[#include <dos.h>
#include <stdlib.h>
#include <unistd.h>
#include <libi86/string.h>
__far const char foo[] = "hello!!!", bar[] = "world ";
__far char baz[14];
int
main (void)
{
  union REGS inr, outr;
  struct SREGS sr;
  _fmemcpy (baz, bar, 6);
  _fmemcpy (baz + 6, foo, 8);
#ifdef __MSDOS__
  inr.h.ah = 0x40;
  inr.w.bx = 1;
  inr.w.cx = sizeof (baz);
  inr.w.dx = FP_OFF (baz);
  sr.ds = FP_SEG (baz);
  if (intdosx (&inr, &outr, &sr) != sizeof (baz)
      || outr.w.ax != sizeof (baz))
    abort ();
  write (1, "\n", 1);
  return 0;
#else
# error
#endif
}]],[[world hello!!!
]])
AT_LIBI86_CHECK_FOR_SMALL_MODEL_OR_ABOVE_NONDPMIABLE(dnl
[[#include <unistd.h>
#include <libi86/string.h>
__far const char foo[] = "hello!!!", bar[] = "world ";
char baz[14];
int
main (void)
{
  _fmemcpy (baz, bar, 6);
  _fmemcpy (baz + 6, foo, 8);
  write (1, baz, sizeof (baz));
  write (1, "\n", 1);
  return 0;
}]],[[world hello!!!
]])
AT_CLEANUP

AT_SETUP([[_fmemmove]])
AT_LIBI86_CHECK_FOR_SMALL_MODEL_OR_ABOVE_NONDPMIABLE(dnl
[[#include <unistd.h>
#include <libi86/string.h>
const char __far foo[] = "!hello!!!\n\n";
char bar[11];
int
main (void)
{
  _fmemmove (foo + 1, foo, 9);
  _fmemcpy (bar, foo, 11);
  write (1, bar, 11);
  return 0;
}]],[[!!hello!!!
]])
AT_CLEANUP
