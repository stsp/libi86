dnl Copyright (c) 2020 TK Chia
dnl
dnl This file is free software; you can redistribute it and/or modify it
dnl under the terms of the GNU Lesser General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public License
dnl along with this program; see the file COPYING2.LIB.  If not see
dnl <http://www.gnu.org/licenses/>.

AT_BANNER([[<dpmi.h> tests]])

AT_SETUP([[__DPMI_hosted]])
AT_LIBI86_CHECK(dnl
[[#include <stdlib.h>
#include <dpmi.h>
int
main (void)
{
  /*
   * Make sure our __DPMI_hosted () implementation reaches the same
   * conclusion as the libc-supplied __DPMI_hosted () implementation if
   * there is one.
   */
  if (__libi86_DPMI_hosted () != __DPMI_hosted ())
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_DPMISegmentToDescriptor]])
AT_LIBI86_CHECK(dnl
[[#include <stdint.h>
#include <stdlib.h>
#include <bios.h>
#include <dpmi.h>
#include <i86.h>
int
main (void)
{
  int32_t res;
  uint16_t sel;
  unsigned kb1, kb2;
  if (__DPMI_hosted () != 1)
    return 0;
  res = _DPMISegmentToDescriptor (0);
  if (res < 0)
    abort ();
  if (res > (int32_t) 0xffff)
    abort ();
  sel = (uint16_t) res;
  kb1 = _bios_memsize ();
  kb2 = * (unsigned __far *) MK_FP (sel, 0x0413);
  if (kb1 != kb2)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_DPMISimulateRealModeInterrupt]])
AT_LIBI86_CHECK(dnl
[[#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <bios.h>
#include <dpmi.h>
int
main (void)
{
  int res;
  rm_call_struct rmc;
  if (__DPMI_hosted () != 1)
    return 0;
  memset (&rmc, 0xf6, sizeof (rmc));
  rmc.ss = rmc.sp = rmc.flags = 0;
  if (_DPMISimulateRealModeInterrupt (0x12, 0, 0, &rmc) != 0)
    abort ();
  if ((unsigned) rmc.eax != _bios_memsize ())
    abort ();
  if (rmc.es != 0xf6f6u || rmc.ds != 0xf6f6u || (uint16_t) rmc.ebp != 0xf6f6u)
    abort ();
  return 0;
}]],[])
AT_CLEANUP
