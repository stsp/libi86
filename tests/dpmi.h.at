dnl Copyright (c) 2020--2021 TK Chia
dnl
dnl Redistribution and use in source and binary forms, with or without
dnl modification, are permitted provided that the following conditions are
dnl met:
dnl
dnl   * Redistributions of source code must retain the above copyright
dnl     notice, this list of conditions and the following disclaimer.
dnl   * Redistributions in binary form must reproduce the above copyright
dnl     notice, this list of conditions and the following disclaimer in the
dnl     documentation and/or other materials provided with the distribution.
dnl   * Neither the name of the developer(s) nor the names of its
dnl     contributors may be used to endorse or promote products derived from
dnl     this software without specific prior written permission.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
dnl IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
dnl TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
dnl PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
dnl HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
dnl SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
dnl TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
dnl PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
dnl LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
dnl NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
dnl SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

AT_BANNER([[<dpmi.h> tests]])

AT_SETUP([[__DPMI_hosted]])
AT_LIBI86_SKIP_IF_NO_DPMI
AT_LIBI86_CHECK(dnl
[[#include <stdlib.h>
#include <dpmi.h>
int
main (void)
{
  /*
   * Make sure our __DPMI_hosted () implementation reaches the same
   * conclusion as the libc-supplied __DPMI_hosted () implementation if
   * there is one.
   */
  if (__libi86_DPMI_hosted () != __DPMI_hosted ())
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_DPMISegmentToDescriptor]])
AT_LIBI86_SKIP_IF_NO_DPMI
AT_LIBI86_CHECK(dnl
[[#include <stdint.h>
#include <stdlib.h>
#include <bios.h>
#include <dpmi.h>
#include <i86.h>
int
main (void)
{
  int32_t res;
  uint16_t sel;
  unsigned kb1, kb2;
  if (__DPMI_hosted () != 1)
    return 0;
  res = _DPMISegmentToDescriptor (0);
  if (res < 0)
    abort ();
  if (res > (int32_t) 0xffff)
    abort ();
  sel = (uint16_t) res;
  kb1 = _bios_memsize ();
  kb2 = * (unsigned __far *) MK_FP (sel, 0x0413);
  if (kb1 != kb2)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_DPMIGetSegmentBaseAddress]])
AT_LIBI86_SKIP_IF_NO_DPMI
AT_LIBI86_CHECK(dnl
[[#include <stdint.h>
#include <stdlib.h>
#include <dpmi.h>
int
main (void)
{
  int32_t res;
  uint16_t sel;
  if (__DPMI_hosted () != 1)
    return 0;
  res = _DPMISegmentToDescriptor (0x0040);
  if (res < 0)
    abort ();
  if (res > (int32_t) 0xffff)
    abort ();
  sel = (uint16_t) res;
  if (_DPMIGetSegmentBaseAddress (sel) != (uint32_t) 0x400)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_DPMISimulateRealModeInterrupt]])
AT_LIBI86_SKIP_IF_NO_DPMI
AT_LIBI86_CHECK(dnl
[[#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <bios.h>
#include <dpmi.h>
int
main (void)
{
  rm_call_struct rmc;
  if (__DPMI_hosted () != 1)
    return 0;
  memset (&rmc, 0xf6, sizeof (rmc));
  rmc.ss = rmc.sp = rmc.flags = 0;
  if (_DPMISimulateRealModeInterrupt (0x12, 0, 0, &rmc) != 0)
    abort ();
  if ((unsigned) rmc.eax != _bios_memsize ())
    abort ();
  if (rmc.es != 0xf6f6u || rmc.ds != 0xf6f6u || (uint16_t) rmc.ebp != 0xf6f6u)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_DPMIIdle, _DPMIGetVirtualInterruptState]])
AT_LIBI86_SKIP_IF_NO_DPMI
AT_LIBI86_CHECK(dnl
[[#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <dpmi.h>
int
main (void)
{
  time_t tyme = time (NULL);
  bool dpmi_p = (__DPMI_hosted () == 1);
  uint8_t res, old_res = 0xff;
  do
    {
      if (dpmi_p && ! _DPMIGetVirtualInterruptState ())
	{
	  fprintf (stderr, "virtual interrupts disabled?!\n");
	  abort ();
	}
      res = _DPMIIdle ();
      if (old_res == 0xff)
	old_res = res;
      else if (res != old_res)
	{
	  fprintf (stderr, "inconsistent int 0x2f/0x1680 return values?!\n");
	  abort ();
	}
      switch (res)
	{
	case 0x00:
	  /* Cool, int 0x2f says that %ax = 0x1680 call is supported. */
	  break;
	case 0x80:
	  /*
	   * int 0x2f says %ax = 0x1680 is unsupported.  If we are running
	   * in DPMI mode, then %ax = 0x1680 _should_ be supported, so this
	   * means something bogus is happening.
	   */
	  if (dpmi_p)
	    {
	      fprintf (stderr, "int 0x2f/0x1680 unsupported in DPMI?!\n");
	      abort ();
	    }
	  break;
	default:
	  /* Any other return value is extremely suspicious. */
	  fprintf (stderr, "lolwut?!?  %%al = %#x\n", (unsigned) res);
	  abort ();
	}
    }
  while (time (NULL) - tyme < 2);
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_DPMIGetCapabilities]])
AT_LIBI86_SKIP_IF_NO_DPMI
AT_LIBI86_CHECK(dnl
[[#include <dpmi.h>
#include <stddef.h>
#include <string.h>
extern void abort (void);
int
main (void)
{
  uint16_t caps1 = 0xf6f6, caps2 = 0xf6f6, caps3 = 0xf6f6;
  dpmi_host_info host;
  size_t i;
  if (__DPMI_hosted () != 1)
    return 0;
  memset (&host, 0xf6, sizeof host);
  if (_DPMIGetCapabilities (&caps1, &caps2, &caps3, &host) != 0)
    return 0;
  /*
   * If the "get DPMI capabilities" function is supported, then
   * host.vendor[] must be an ASCIIZ string.
   */
  for (i = 0; i < sizeof host.vendor; ++i)
    if (host.vendor[i] == 0)
      return 0;
  abort ();
  return 1;
}]],[])
AT_CLEANUP
