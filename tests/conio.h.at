dnl Copyright (c) 2018--2020 TK Chia
dnl
dnl This file is free software; you can redistribute it and/or modify it
dnl under the terms of the GNU Lesser General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public License
dnl along with this program; see the file COPYING2.LIB.  If not see
dnl <http://www.gnu.org/licenses/>.

AT_BANNER([[<conio.h> tests]])

AT_SETUP([[cprintf, cputs]])
AT_LIBI86_CHECK_CONSOLE(dnl
[[#include <conio.h>
int
main (int argc, char **argv)
{
  cputs ("hello ");
  cprintf ("%s%c...\n\n...with argc == %#x\n", "world", (int) '!', argc);
  return 0;
}]],[[hello world!...

...with argc == 0x1
]])
AT_CLEANUP

AT_SETUP([[getch, getche, kbhit, ungetch]])
AT_LIBI86_CHECK_CONSOLE(dnl
[[#include <conio.h>
int
main (int argc, char **argv)
{
  int c = getch ();
  cprintf ("getch () = %#x\n", c);
  c = getch ();
  cprintf ("getch () = %#x\n", c);
  c = getche ();
  cprintf ("getche () = %#x\n", c);
  ungetch ((int) '@');
  cprintf ("kbhit () = %s\n", kbhit () ? "true" : "false");
  c = getche ();
  cprintf ("getche () = %#x\n", c);
  cprintf ("kbhit () = %s\n", kbhit () ? "true" : "false");
  return 0;
}]],[[getch () = 0
getch () = 0x3f
!getche () = 0x21
kbhit () = true
@getche () = 0x40
kbhit () = false
]],[[-input '\p20;\F5;!']])
AT_CLEANUP

AT_SETUP([[inp, outp]])
AT_LIBI86_CHECK_FOR_NONDPMIABLE(dnl
[[#include <conio.h>
#include <stdlib.h>

static unsigned ticks (void)
{
  return *(unsigned volatile __far *) 0x0040006cul;
}

static void do_abort (unsigned char s_ocw1)
{
  outp (0x21, s_ocw1);
  abort ();
}

int
main (void)
{
  unsigned from, c1, c2;
  unsigned char s_ocw1 = inp (0x21);

  /* Check that the PIC 1 interrupt mask given by the output control word 1
     (OCW1) does not have either IRQ 0 or IRQ 1 disabled.  */
  if ((s_ocw1 & 0x03) != 0x00)
    abort ();

  srand (ticks ());
  c1 = 5000;
  while (c1-- != 0)
    {
      outp (0x21, 0xff);
      /* Check that the handler for the timer interrupt (IRQ 0) cannot
	 update the tick count, when IRQs 0--7 are disabled.  */
      from = ticks ();
      c2 = rand() / (RAND_MAX / 100) + 1;
      while (c2-- != 0)
	{
	  if (ticks () != from)
	    do_abort (s_ocw1);
        }
      if (inp (0x21) != 0xff)
	do_abort (s_ocw1);

      outp (0x21, s_ocw1 | 0x01);
      /* Check that the IRQ 0 handler cannot update the tick count when IRQ
	 0 is disabled.  */
      c2 = rand() / (RAND_MAX / 100) + 1;
      while (c2-- != 0)
	{
	  if (ticks () != from)
	    do_abort (s_ocw1);
        }
      if (inp (0x21) != (s_ocw1 | 0x01))
	do_abort (s_ocw1);

      /* Allow IRQs 0--7 for a while.  Every now and then, also wait for the
	 timer tick count to get updated.  */
      outp (0x21, s_ocw1);
      if (c1 % 200 == 0)
	while (ticks () == from)
	  __asm volatile ("hlt");
      if (inp (0x21) != s_ocw1)
	do_abort (s_ocw1);
    }

  return 0;
}
]],[])
AT_CLEANUP

AT_SETUP([[inportb, outportb]])
AT_LIBI86_CHECK_FOR_NONDPMIABLE(dnl
[[#define _BORLANDC_SOURCE
#include <conio.h>
#include <stdlib.h>

static unsigned ticks (void)
{
  return *(unsigned volatile __far *) 0x0040006cul;
}

static void do_abort (unsigned char s_ocw1)
{
  outportb (0x21, s_ocw1);
  abort ();
}

int
main (void)
{
  unsigned from, c1, c2;
  unsigned char s_ocw1 = inportb (0x21);

  if ((s_ocw1 & 0x03) != 0x00)
    abort ();

  srand (ticks ());
  c1 = 5000;
  while (c1-- != 0)
    {
      outportb (0x21, 0xff);
      from = ticks ();
      c2 = rand() / (RAND_MAX / 100) + 1;
      while (c2-- != 0)
	{
	  if (ticks () != from)
	    do_abort (s_ocw1);
        }
      if (inportb (0x21) != 0xff)
	do_abort (s_ocw1);

      outportb (0x21, s_ocw1);
      if (c1 % 200 == 0)
	while (ticks () == from)
	  __asm volatile ("hlt");
      if (inportb (0x21) != s_ocw1)
	do_abort (s_ocw1);
    }

  return 0;
}
]],[])
AT_CLEANUP
