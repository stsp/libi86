dnl Copyright (c) 2018--2023 TK Chia
dnl
dnl Redistribution and use in source and binary forms, with or without
dnl modification, are permitted provided that the following conditions are
dnl met:
dnl
dnl   * Redistributions of source code must retain the above copyright
dnl     notice, this list of conditions and the following disclaimer.
dnl   * Redistributions in binary form must reproduce the above copyright
dnl     notice, this list of conditions and the following disclaimer in the
dnl     documentation and/or other materials provided with the distribution.
dnl   * Neither the name of the developer(s) nor the names of its
dnl     contributors may be used to endorse or promote products derived from
dnl     this software without specific prior written permission.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
dnl IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
dnl TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
dnl PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
dnl HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
dnl SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
dnl TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
dnl PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
dnl LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
dnl NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
dnl SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

AT_BANNER([[<i86.h> tests (part 2)]])

AT_SETUP([[segread]])
AT_LIBI86_CHECK(dnl
[[#include <stdlib.h>
#include <string.h>
#include <i86.h>
int main (void)
{
  struct SREGS sregs;
  memset (&sregs, 0xf6, sizeof (sregs));
  segread (&sregs);
#ifndef __IA16_CMODEL_IS_FAR_TEXT
  if (sregs.cs != __libi86_get_cs ())
    abort ();
# ifdef __FAR
  if (sregs.cs != FP_SEG (main))
    abort ();
# endif
#endif
  if (sregs.ss != __libi86_get_ss ())
    abort ();
  if (sregs.ss != FP_SEG (_CV_FP (&sregs)))
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[int86]])
AT_LIBI86_CHECK_DOS(dnl
[[#include <i86.h>
#include <string.h>
int main (void)
{
  union REGS regs;
#ifdef __MSDOS__
  static char msg[] = "Hello from int86!\r\n$(ignore this part)\r\n";
  memset (&regs, 0xf6, sizeof (regs));
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (_CV_FP (msg));
  int86 (0x21, &regs, &regs);
#else
# error
#endif
  return 0;
}]],[[Hello from int86!
]])
AT_LIBI86_CHECK_DOS(dnl
[[#include <bios.h>
#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGS regs;
  unsigned rv;
  memset (&regs, 0xf6, sizeof (regs));
  rv = (unsigned) int86 (0x12, &regs, &regs);
  if (rv != regs.w.ax)
    abort ();
  if (rv != _bios_memsize ())
    abort ();
  memset (&regs, 0xf6, sizeof (regs));
  rv = (unsigned) int86 (0x11, &regs, &regs);
  if (rv != regs.w.ax)
    abort ();
  if (rv != _bios_equiplist ())
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[int86x]])
AT_LIBI86_CHECK_DOS(dnl
[[#include <stdlib.h>
#include <i86.h>
#include <string.h>
int main (void)
{
  union REGS regs;
  struct SREGS sregs;
#ifdef __MSDOS__
  static char msg[] = "Hello from int86x!\r\n$(ignore this part)\r\n";
  memset (&regs, 0xf6, sizeof (regs));
  memset (&sregs, 0, sizeof (sregs));
  sregs.ds = FP_SEG (_CV_FP (msg));
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (_CV_FP (msg));
  int86x (0x21, &regs, &regs, &sregs);
# ifndef __IA16_CMODEL_IS_FAR_TEXT
  if (sregs.cs != __libi86_get_cs ())
    abort ();
# endif
  if (sregs.ds != FP_SEG (_CV_FP (msg)))
    abort ();
  if (sregs.es != 0)
    abort ();
  if (sregs.ss != FP_SEG (_CV_FP (&regs)))
    abort ();
#else
# error
#endif
  return 0;
}]],[[Hello from int86x!
]])
AT_LIBI86_CHECK_DOS_FOR_SMALL_MODEL_OR_ABOVE_NONDOSX(dnl
[[#include <stdlib.h>
#include <string.h>
#include <i86.h>
int main (void)
{
  union REGS regs;
  struct SREGS sregs;
#ifdef __MSDOS__
  static char __far msg[] = "Hello again!\r\n$(ignore this part)\r\n";
  memset (&regs, 0xf6, sizeof (regs));
  memset (&sregs, 0xf6, sizeof (sregs));
  sregs.ds = FP_SEG (msg);
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (msg);
  int86x (0x21, &regs, &regs, &sregs);
# ifndef __IA16_CMODEL_IS_FAR_TEXT
  if (sregs.cs != __libi86_get_cs ())
    abort ();
# endif
  if (sregs.ds != FP_SEG (msg))
    abort ();
  if (sregs.es != 0xf6f6)
    abort ();
  if (sregs.ss != FP_SEG (&regs))
    abort ();
#else
# error
#endif
  return 0;
}]],[[Hello again!
]])
AT_LIBI86_CHECK_DOS_FOR_NONDOSX(dnl
[[#include <bios.h>
#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGS regs;
  struct SREGS sregs;
  unsigned rv;
  memset (&regs, 0xf6, sizeof (regs));
  memset (&sregs, 0xf6, sizeof (sregs));
  rv = (unsigned) int86x (0x12, &regs, &regs, &sregs);
  if (rv != regs.w.ax)
    abort ();
  if (rv != _bios_memsize ())
    abort ();
  if (sregs.ds != 0xf6f6u)
    abort ();
  if (sregs.es != 0xf6f6u)
    abort ();
  memset (&regs, 0xf6, sizeof (regs));
  memset (&sregs, 0xf6, sizeof (sregs));
  rv = (unsigned) int86x (0x11, &regs, &regs, &sregs);
  if (rv != regs.w.ax)
    abort ();
  if (rv != _bios_equiplist ())
    abort ();
  if (sregs.ds != 0xf6f6u)
    abort ();
  if (sregs.es != 0xf6f6u)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[intr]])
AT_LIBI86_CHECK_DOS(dnl
[[#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGPACK regs;
#ifdef __MSDOS__
  static char msg[] = "Hello from intr!\r\n$(ignore this part)\r\n";
  memset (&regs, 0, sizeof (regs));
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (_CV_FP (msg));
  regs.w.ds = FP_SEG (_CV_FP (msg));
  intr (0x21, &regs);
  if (regs.w.ds != FP_SEG (_CV_FP (msg)))
    abort ();
  if (regs.w.es != 0)
    abort ();
#else
# error
#endif
  return 0;
}]],[[Hello from intr!
]])
AT_LIBI86_CHECK_DOS_FOR_SMALL_MODEL_OR_ABOVE_NONDOSX(dnl
[[#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGPACK regs;
#ifdef __MSDOS__
  static char __far msg[] = "Hello from intr...\r\n$(ignore this part)\r\n";
  memset (&regs, 0xf6, sizeof (regs));
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (msg);
  regs.w.ds = FP_SEG (msg);
  intr (0x21, &regs);
  if (regs.w.ds != FP_SEG (msg))
    abort ();
  if (regs.w.es != 0xf6f6u)
    abort ();
#else
# error
#endif
  return 0;
}]],[[Hello from intr...
]])
AT_LIBI86_CHECK_DOS_FOR_NONDOSX(dnl
[[#include <bios.h>
#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGPACK regs;
  memset (&regs, 0xf6, sizeof (regs));
  intr (0x12, &regs);
  if (regs.w.ax != _bios_memsize ())
    abort ();
  if (regs.w.ds != 0xf6f6u)
    abort ();
  if (regs.w.es != 0xf6f6u)
    abort ();
  memset (&regs, 0xf6, sizeof (regs));
  intr (0x11, &regs);
  if (regs.w.ax != _bios_equiplist ())
    abort ();
  if (regs.w.ds != 0xf6f6u)
    abort ();
  if (regs.w.es != 0xf6f6u)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_disable, _enable]])

AT_LIBI86_CHECK_DOS(dnl
[[#include <bios.h>
#include <i86.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#if ! defined __FAR || defined __IA16_FEATURE_DOSX
# include <libi86/internal/bda.h>
#endif
#ifdef __IA16_FEATURE_DOSX
# include <dpmi.h>
#endif

static void do_abort (const char *msg)
{
  _enable ();
  fputs (msg, stderr);
  abort ();
}

static unsigned ticks (void)
{
#if defined __FAR && ! defined __IA16_FEATURE_DOSX
  return *(unsigned volatile __far *) 0x0040006cUL;
#else
  /*
   * Do not use _bios_timeofday (, ) (i.e. int 0x1a) here!
   *
   * In particular, the IBM AT BIOS (11/15/85)'s int 0x1a handler will set
   * the interrupt flag (IF) to 1 & actually return to its caller with IF = 1.
   * SeaBIOS's int 0x1a handler will also enable interrupts internally.  For
   * this particular case, we want to read the time of the day without
   * altering IF.
   *
   * See https://github.com/dosemu2/dosemu2/issues/1673 .
   */
  return __libi86_peek_bda (0x006cU);
#endif
}

#ifdef __IA16_FEATURE_DOSX
static void
check_real_if (bool expect_real_if, const char *msg)
{
  bool real_if = ((__libi86_get_flags () & 0x0200U) != 0);
  if (real_if != expect_real_if)
    do_abort (msg);
}

static void
check_virt_if (bool expect_virt_if, const char *msg)
{
  bool virt_if = _DPMIGetVirtualInterruptState ();
  if (virt_if != expect_virt_if)
    do_abort (msg);
}
#endif  /* __IA16_FEATURE_DOSX */

static bool
get_virt_if (void)
{
#ifdef __IA16_FEATURE_DOSX
  bool virt_if = _DPMIGetVirtualInterruptState ();
  unsigned cpl = __libi86_get_cs () & 3;
  unsigned short flags = __libi86_get_flags ();
  unsigned iopl = (flags >> 12) & 3;
  if (cpl > iopl)
    {
      /*
       * Besides returning the virtual interrupt state, also take a moment
       * to test the _real_ interrupt state.
       *
       * If virtual interrupts are enabled, then it makes no sense for real
       * interrupts to be disabled.  Check for this condition.
       *
       * If CPL > IOPL, & real interrupts are enabled, test that real
       * interrupts remain enabled even if we do a `popfw' or `iretw' that
       * tries to change this.  If CPL > IOPL, & real interrupts are
       * disabled (?!?), test that they remain disabled after a `popfw' or
       * `iretw'.
       *
       * Also check that `popfw' & `iretw' do not disturb the virtual
       * interrupt state.
       */
      unsigned scratch;
      bool real_if = ((flags & 0x0200U) != 0);
      if (virt_if && ! real_if)
	do_abort ("VIF = 1 but IF = 0");
      __asm volatile ("push{w} %0; "
		      "popfw"
		      : /* no outputs */
		      : "rm" (flags ^ 0x0200U)
		      : "cc", "memory");
      check_real_if (real_if,
		     real_if ? "IF 1 ~> 0 after popfw #1, CPL > IOPL"
			     : "IF 0 ~> 1 after popfw #1, CPL > IOPL");
      check_virt_if (virt_if,
		     virt_if ? "VIF 1 ~> 0 after popfw #1, CPL > IOPL"
			     : "VIF 0 ~> 1 after popfw #1, CPL > IOPL");
      __asm volatile ("push{w} %0; "
		      "popfw"
		      : /* no outputs */
		      : "rm" (flags)
		      : "cc", "memory");
      check_real_if (real_if,
		     real_if ? "IF 1 ~> 0 after popfw #2, CPL > IOPL"
			     : "IF 0 ~> 1 after popfw #2, CPL > IOPL");
      check_virt_if (virt_if,
		     virt_if ? "VIF 1 ~> 0 after popfw #2, CPL > IOPL"
			     : "VIF 0 ~> 1 after popfw #2, CPL > IOPL");
      __asm volatile ("push{w} %1; "
		      "push{w} {%%}cs; "
		      "mov{w} {$0f, %0|%0, offset 0f}; "
		      "push{w} %0; "
		      "iretw; "
		      "0:"
		      : "=r" (scratch)
		      : "rm" (flags ^ 0x0200U)
		      : "cc", "memory");
      check_real_if (real_if,
		     real_if ? "IF 1 ~> 0 after iretw #1, CPL > IOPL"
			     : "IF 0 ~> 1 after iretw #1, CPL > IOPL");
      check_virt_if (virt_if,
		     virt_if ? "VIF 1 ~> 0 after iretw #1, CPL > IOPL"
			     : "VIF 0 ~> 1 after iretw #1, CPL > IOPL");
      __asm volatile ("push{w} %1; "
		      "push{w} {%%}cs; "
		      "mov{w} {$0f, %0|%0, offset 0f}; "
		      "push{w} %0; "
		      "iretw; "
		      "0:"
		      : "=r" (scratch)
		      : "rm" (flags)
		      : "cc", "memory");
      check_real_if (real_if,
		     real_if ? "IF 1 ~> 0 after iretw #2, CPL > IOPL"
			     : "IF 0 ~> 1 after iretw #2, CPL > IOPL");
      check_virt_if (virt_if,
		     virt_if ? "VIF 1 ~> 0 after iretw #2, CPL > IOPL"
			     : "VIF 0 ~> 1 after iretw #2, CPL > IOPL");
    }
  return virt_if;
#else
  return (__libi86_get_flags () & 0x0200U) != 0;
#endif
}

int
main (void)
{
  unsigned from, c1, c2;

  if (! get_virt_if ())
    do_abort ("(V)IF = 0 on startup");

  srand (ticks ());
  c1 = 5000;
  while (c1-- != 0)
    {
      _disable ();

      /* Check that the handler for the timer interrupt (IRQ 0) cannot
	 update the tick count, when all IRQs are disabled.  */
      from = ticks ();
      if (get_virt_if ())
	do_abort ("(V)IF = 1 after _disable () #1");
      c2 = rand() / (RAND_MAX / 100) + 1;
      while (c2-- != 0)
	{
	  if (ticks () != from)
	    do_abort ("IRQ 0 after _disable ()");
        }

      if (get_virt_if ())
	do_abort ("(V)IF = 1 after _disable () #2");

      /* Allow interrupts for a while.  Every now and then, also wait for
	 the timer tick count to get updated.  */
      _enable ();
      if (c1 % 200 == 0)
	while (ticks () == from)
	  {
#ifdef __GNUC__
# ifdef __IA16_FEATURE_DOSX
	    _DPMIIdle ();
# else
	    __asm volatile ("hlt");
# endif
#endif
	  }
      if (! get_virt_if ())
	do_abort ("(V)IF = 0 after _enable ()");
    }

  return 0;
}]],[])

if "$at_arg_x_test_underlying" && test yes = "$at_libi86_cc_have_dosx"; then
AT_LIBI86_CHECK_DOS(dnl
[[#include <i86.h>
#include <dpmi.h>

extern void abort (void);

static unsigned
flags(void)
{
  unsigned f;
  __asm volatile ("pushfw; popw %0" : "=rm" (f));
  if (_DPMIGetVirtualInterruptState ())
    f |= 0x0200U;
  else
    f &= ~0x0200U;
  return f;
}

static unsigned
virt_if(void)
{
  return (unsigned) _DPMIGetVirtualInterruptState ();
}

int
main (void)
{
  unsigned f, v, tm, bda;

  if (__DPMI_hosted () != 1)
    return 0;
  /*
   * This is more of a regression test for a bug in some versions of dosemu2
   * (https://github.com/dosemu2/dosemu2/issues/1568).
   *
   * Namely, accessing a BIOS data area variable via 0x40:0x6c in DPMI mode
   * --- where the protected mode selector 0x40 "magically" maps to real/V86
   * mode 0x40:0 --- with virtual interrupts disabled, then virtual interrupts
   * might suddenly become enabled on their own.
   *
   * Try to only run this test under versions of dosemu2 which are known to
   * magically handle selector value 0x40.  This can be done (?) by looking
   * for a particular vendor-specific DPMI API.  Directly accessing selector
   * 0x40 in other DPMI environments might well crash the program...
   */
  if (! _DPMIGetVendorSpecificAPI ("LDT_MONITOR"))
    return 0;

  _disable ();
  f = flags ();
  v = virt_if ();
  _enable ();

  if ((f & 0x0200) != 0 || v)
    abort ();

  _disable ();
  tm = * (unsigned __far *) 0x0040006cUL;
  f = flags ();
  v = virt_if ();
  _enable ();

  if ((f & 0x0200) != 0 || v)
    abort ();
  __asm volatile ("" : : "g" (tm));

  _disable ();
  bda = _DPMISegmentToDescriptor (0x40);
  tm = * (unsigned __far *) MK_FP (bda, 0x6c);
  f = flags ();
  v = virt_if ();
  _enable ();

  if ((f & 0x0200) != 0 || v)
    abort ();
  __asm volatile ("" : : "g" (tm));

  return 0;
}]],[])
fi

AT_CLEANUP

AT_SETUP([[delay]])
AT_LIBI86_CHECK(dnl
[[#include <i86.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int main (void)
{
  time_t tm1, tm2;
  tm1 = time (NULL);
  delay (2200);
  tm2 = time (NULL);
  if (tm2 - tm1 < 2)
    {
      fprintf (stderr, "tm1 = %ld, tm2 = %ld\n", (long) tm1, (long) tm2);
      abort ();
    }
  return 0;
}]],[])
AT_CLEANUP
