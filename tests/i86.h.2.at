dnl Copyright (c) 2018--2021 TK Chia
dnl
dnl Redistribution and use in source and binary forms, with or without
dnl modification, are permitted provided that the following conditions are
dnl met:
dnl
dnl   * Redistributions of source code must retain the above copyright
dnl     notice, this list of conditions and the following disclaimer.
dnl   * Redistributions in binary form must reproduce the above copyright
dnl     notice, this list of conditions and the following disclaimer in the
dnl     documentation and/or other materials provided with the distribution.
dnl   * Neither the name of the developer(s) nor the names of its
dnl     contributors may be used to endorse or promote products derived from
dnl     this software without specific prior written permission.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
dnl IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
dnl TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
dnl PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
dnl HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
dnl SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
dnl TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
dnl PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
dnl LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
dnl NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
dnl SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

AT_BANNER([[<i86.h> tests (part 2)]])

AT_SETUP([[segread]])
AT_LIBI86_CHECK(dnl
[[#include <stdlib.h>
#include <string.h>
#include <i86.h>
int main (void)
{
  struct SREGS sregs;
  memset (&sregs, 0xf6, sizeof (sregs));
  segread (&sregs);
#ifndef __IA16_CMODEL_IS_FAR_TEXT
  if (sregs.cs != __libi86_get_cs ())
    abort ();
# ifdef __FAR
  if (sregs.cs != FP_SEG (main))
    abort ();
# endif
#endif
  if (sregs.ss != __libi86_get_ss ())
    abort ();
  if (sregs.ss != FP_SEG (_CV_FP (&sregs)))
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[int86]])
AT_LIBI86_CHECK_FOR_NONDPMIABLE(dnl
[[#include <i86.h>
#include <string.h>
int main (void)
{
  union REGS regs;
#ifdef __MSDOS__
  static char msg[] = "Hello from int86!\r\n$(ignore this part)\r\n";
  memset (&regs, 0xf6, sizeof (regs));
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (_CV_FP (msg));
  int86 (0x21, &regs, &regs);
#else
# error
#endif
  return 0;
}]],[[Hello from int86!
]])
AT_LIBI86_CHECK(dnl
[[#include <bios.h>
#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGS regs;
  unsigned rv;
  memset (&regs, 0xf6, sizeof (regs));
  rv = (unsigned) int86 (0x12, &regs, &regs);
  if (rv != regs.w.ax)
    abort ();
  if (rv != _bios_memsize ())
    abort ();
  memset (&regs, 0xf6, sizeof (regs));
  rv = (unsigned) int86 (0x11, &regs, &regs);
  if (rv != regs.w.ax)
    abort ();
  if (rv != _bios_equiplist ())
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[int86x]])
AT_LIBI86_CHECK_FOR_NONDPMIABLE(dnl
[[#include <stdlib.h>
#include <i86.h>
#include <string.h>
int main (void)
{
  union REGS regs;
  struct SREGS sregs;
#ifdef __MSDOS__
  static char msg[] = "Hello from int86x!\r\n$(ignore this part)\r\n";
  memset (&regs, 0xf6, sizeof (regs));
  memset (&sregs, 0xf6, sizeof (sregs));
  sregs.ds = FP_SEG (_CV_FP (msg));
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (_CV_FP (msg));
  int86x (0x21, &regs, &regs, &sregs);
# ifndef __IA16_CMODEL_IS_FAR_TEXT
  if (sregs.cs != __libi86_get_cs ())
    abort ();
# endif
  if (sregs.ds != FP_SEG (_CV_FP (msg)))
    abort ();
  if (sregs.es != 0xf6f6u)
    abort ();
  if (sregs.ss != FP_SEG (_CV_FP (&regs)))
    abort ();
#else
# error
#endif
  return 0;
}]],[[Hello from int86x!
]])
AT_LIBI86_CHECK_FOR_SMALL_MODEL_OR_ABOVE_NONDPMIABLE(dnl
[[#include <stdlib.h>
#include <string.h>
#include <i86.h>
int main (void)
{
  union REGS regs;
  struct SREGS sregs;
#ifdef __MSDOS__
  static char __far msg[] = "Hello again!\r\n$(ignore this part)\r\n";
  memset (&regs, 0xf6, sizeof (regs));
  memset (&sregs, 0xf6, sizeof (sregs));
  sregs.ds = FP_SEG (msg);
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (msg);
  int86x (0x21, &regs, &regs, &sregs);
# ifndef __IA16_CMODEL_IS_FAR_TEXT
  if (sregs.cs != __libi86_get_cs ())
    abort ();
# endif
  if (sregs.ds != FP_SEG (msg))
    abort ();
  if (sregs.es != 0xf6f6u)
    abort ();
  if (sregs.ss != FP_SEG (&regs))
    abort ();
#else
# error
#endif
  return 0;
}]],[[Hello again!
]])
AT_LIBI86_CHECK_FOR_NONDPMIABLE(dnl
[[#include <bios.h>
#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGS regs;
  struct SREGS sregs;
  unsigned rv;
  memset (&regs, 0xf6, sizeof (regs));
  memset (&sregs, 0xf6, sizeof (sregs));
  rv = (unsigned) int86x (0x12, &regs, &regs, &sregs);
  if (rv != regs.w.ax)
    abort ();
  if (rv != _bios_memsize ())
    abort ();
  if (sregs.ds != 0xf6f6u)
    abort ();
  if (sregs.es != 0xf6f6u)
    abort ();
  memset (&regs, 0xf6, sizeof (regs));
  memset (&sregs, 0xf6, sizeof (sregs));
  rv = (unsigned) int86x (0x11, &regs, &regs, &sregs);
  if (rv != regs.w.ax)
    abort ();
  if (rv != _bios_equiplist ())
    abort ();
  if (sregs.ds != 0xf6f6u)
    abort ();
  if (sregs.es != 0xf6f6u)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[intr]])
AT_LIBI86_CHECK_FOR_NONDPMIABLE(dnl
[[#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGPACK regs;
#ifdef __MSDOS__
  static char msg[] = "Hello from intr!\r\n$(ignore this part)\r\n";
  memset (&regs, 0xf6, sizeof (regs));
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (_CV_FP (msg));
  regs.w.ds = FP_SEG (_CV_FP (msg));
  intr (0x21, &regs);
  if (regs.w.ds != FP_SEG (_CV_FP (msg)))
    abort ();
  if (regs.w.es != 0xf6f6u)
    abort ();
#else
# error
#endif
  return 0;
}]],[[Hello from intr!
]])
AT_LIBI86_CHECK_FOR_SMALL_MODEL_OR_ABOVE_NONDPMIABLE(dnl
[[#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGPACK regs;
#ifdef __MSDOS__
  static char __far msg[] = "Hello from intr...\r\n$(ignore this part)\r\n";
  memset (&regs, 0xf6, sizeof (regs));
  regs.h.ah = 0x09;
  regs.w.dx = FP_OFF (msg);
  regs.w.ds = FP_SEG (msg);
  intr (0x21, &regs);
  if (regs.w.ds != FP_SEG (msg))
    abort ();
  if (regs.w.es != 0xf6f6u)
    abort ();
#else
# error
#endif
  return 0;
}]],[[Hello from intr...
]])
AT_LIBI86_CHECK_FOR_NONDPMIABLE(dnl
[[#include <bios.h>
#include <i86.h>
#include <stdlib.h>
#include <string.h>
int main (void)
{
  union REGPACK regs;
  memset (&regs, 0xf6, sizeof (regs));
  intr (0x12, &regs);
  if (regs.w.ax != _bios_memsize ())
    abort ();
  if (regs.w.ds != 0xf6f6u)
    abort ();
  if (regs.w.es != 0xf6f6u)
    abort ();
  memset (&regs, 0xf6, sizeof (regs));
  intr (0x11, &regs);
  if (regs.w.ax != _bios_equiplist ())
    abort ();
  if (regs.w.ds != 0xf6f6u)
    abort ();
  if (regs.w.es != 0xf6f6u)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_disable, _enable]])
AT_LIBI86_CHECK_FOR_NONDPMIABLE(dnl
[[#include <bios.h>
#include <i86.h>
#include <stdlib.h>

static void do_abort (void)
{
  _enable ();
  abort ();
}

static unsigned ticks (void)
{
#ifdef __FAR
  return *(unsigned volatile __far *) 0x0040006cul;
#else
  long tv;
  if (_bios_timeofday (_TIME_GETCLOCK, &tv) < 0)
    do_abort ();
  return (unsigned) tv;
#endif
}

int
main (void)
{
  unsigned from, c1, c2;

  if (! (__libi86_get_flags () & 0x0200u))
    abort ();

  srand (ticks ());
  c1 = 5000;
  while (c1-- != 0)
    {
      _disable ();

      /* Check that the handler for the timer interrupt (IRQ 0) cannot
	 update the tick count, when all IRQs are disabled.  */
      from = ticks ();
      if (__libi86_get_flags () & 0x0200u)
	do_abort ();
      c2 = rand() / (RAND_MAX / 100) + 1;
      while (c2-- != 0)
	{
	  if (ticks () != from)
	    do_abort ();
        }

      if (__libi86_get_flags () & 0x0200u)
	do_abort ();

      /* Allow interrupts for a while.  Every now and then, also wait for
	 the timer tick count to get updated.  */
      _enable ();
      if (c1 % 200 == 0)
	while (ticks () == from)
	  {
#ifdef __GNUC__
	    __asm volatile ("hlt");
#endif
	  }
      if (! (__libi86_get_flags () & 0x0200u))
	do_abort ();
    }

  return 0;
}
]],[])
AT_CLEANUP

AT_SETUP([[delay]])
AT_LIBI86_CHECK_FOR_NONDPMIABLE(dnl
[[#include <i86.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int main (void)
{
  time_t tm1, tm2;
  tm1 = time (NULL);
  delay (2200);
  tm2 = time (NULL);
  if (tm2 - tm1 < 2)
    {
      fprintf (stderr, "tm1 = %ld, tm2 = %ld\n", (long) tm1, (long) tm2);
      abort ();
    }
  return 0;
}]],[])
AT_CLEANUP
