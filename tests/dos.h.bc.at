dnl Copyright (c) 2021 TK Chia
dnl
dnl This file is free software; you can redistribute it and/or modify it
dnl under the terms of the GNU Lesser General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public License
dnl along with this program; see the file COPYING2.LIB.  If not see
dnl <http://www.gnu.org/licenses/>.

AT_BANNER([[<dos.h> tests (Borland compatibility)]])

AT_SETUP([[intdos (Borland)]])
AT_LIBI86_CHECK_FOR_NEAR_DATA_MODEL_NONDPMIABLE(dnl
[[#define _BORLANDC_SOURCE
#include <dos.h>
void abort (void);
int
main (void)
{
  union REGS regs;
  int rv;
#ifdef __MSDOS__
  static char msg[] = "Hello from intdos!\r\n(ignore this part)";
  memset (&regs, 0xf6, sizeof (regs));
  regs.h.ah = 0x40;
  regs.x.bx = 1;
  regs.x.cx = 20;
  regs.x.dx = FP_OFF (msg);
  rv = intdos (&regs, &regs);
  if (rv != 20 || regs.x.cflag || (regs.x.flags & 0x0701) != 0x0200)
    abort ();
  return 0;
#else
# error
#endif
}]],[[Hello from intdos!
]])
AT_CLEANUP

AT_SETUP([[intdosx (Borland)]])
AT_LIBI86_CHECK_FOR_SMALL_MODEL_OR_ABOVE_NONDPMIABLE(dnl
[[#define _BORLANDC_SOURCE
#include <dos.h>
#include <string.h>
#include <time.h>
#ifndef __MSDOS__
# error
#endif
void abort (void);
__far const char msg1[] = "hello world ~\n";
static unsigned
get_cs (void)
{
  unsigned v;
  __asm volatile ("{movw %%cs, %0|mov %0, cs}" : "=r" (v));
  return v;
}
static unsigned
get_ss (void)
{
  unsigned v;
  __asm volatile ("{movw %%ss, %0|mov %0, ss}" : "=r" (v));
  return v;
}
int
main (void)
{
  union REGS r;
  struct SREGS sr;
  unsigned cookie = time (NULL);
  memset (&r, 0xf6, sizeof (r));
  memset (&sr, 0xf6, sizeof (sr));
  r.h.ah = 0x40;
  r.x.bx = 1;
  r.x.cx = sizeof (msg1) - 1;
  r.x.dx = FP_OFF (msg1);
  sr.ds = FP_SEG (msg1);
  sr.es = cookie;
  if (intdosx (&r, &r, &sr) != sizeof (msg1) - 1
      || r.x.ax != sizeof (msg1) - 1
      || r.x.cflag || (r.x.flags & 0x0701) != 0x0200
# ifndef __IA16_CMODEL_IS_FAR_TEXT
      || sr.cs != get_cs ()
# endif
      || sr.ss != get_ss () || sr.ds != FP_SEG (msg1) || sr.es != cookie)
    abort ();
  return 0;
}]],[[hello world ~
]])
AT_CLEANUP
