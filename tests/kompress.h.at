dnl Copyright (c) 2023 TK Chia
dnl
dnl Redistribution and use in source and binary forms, with or without
dnl modification, are permitted provided that the following conditions are
dnl met:
dnl
dnl   * Redistributions of source code must retain the above copyright
dnl     notice, this list of conditions and the following disclaimer.
dnl   * Redistributions in binary form must reproduce the above copyright
dnl     notice, this list of conditions and the following disclaimer in the
dnl     documentation and/or other materials provided with the distribution.
dnl   * Neither the name of the developer(s) nor the names of its
dnl     contributors may be used to endorse or promote products derived from
dnl     this software without specific prior written permission.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
dnl IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
dnl TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
dnl PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
dnl HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
dnl SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
dnl TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
dnl PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
dnl LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
dnl NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
dnl SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

AT_BANNER([[<libi86/kompress.h> tests]])

AT_SETUP([[_lz4cpy]])
AT_LIBI86_CHECK(dnl
[[#include <i86.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libi86/kompress.h>
int
main (void)
{
  static const uint8_t data_lz4[]
    = {
	0xf1, 0x01, 0x73, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x6c, 0x6c, 0x73, 0x20, 0x73, 0x65, 0x61, 0x2d,
	0x73, 0x68, 0x0b, 0x00, 0x63, 0x62, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x12, 0x00, 0x41, 0x6f, 0x72,
	0x65, 0x0a, 0x0e, 0x00, 0x02, 0x1c, 0x00, 0x06,
	0x31, 0x00, 0x38, 0x61, 0x72, 0x65, 0x35, 0x00,
	0x90, 0x49, 0x27, 0x6d, 0x20, 0x73, 0x75, 0x72,
	0x65, 0x0a,
      };
  uint8_t data[256], *p;
  _fptr_t res;
  size_t n;
  memset (data, 0xf6, sizeof (data));
  res = _lz4cpy (_CV_FP (data), _CV_FP (data_lz4), sizeof (data_lz4));
  if (FP_SEG (res) != FP_SEG (_CV_FP (data)))
    abort ();
  n = FP_OFF (res) - FP_OFF (_CV_FP (data));
  printf ("%u\n", (unsigned) n);
  for (p = data; p != data + n; ++p)
    putchar ((int) *p);
  for (; p != data + sizeof (data); ++p)
    if (*p != 0xf6)
      abort ();
  return 0;
}]],[[83
she sells sea-shells by the sea-shore
the shells she sells are sea-shells I'm sure
]])
AT_LIBI86_CHECK_FOR_SMALL_MODEL_OR_ABOVE_NONDOSX(dnl
[[#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <libi86/kompress.h>
int
main (void)
{
  static __far const uint8_t data_lz4[]
    = {
	0xf0, 0x1e, 0xc6, 0xef, 0xf2, 0xa0, 0xe9, 0xee,
	0xf3, 0xf4, 0xe1, 0xee, 0xe3, 0xe5, 0xac, 0xa0,
	0xf4, 0xe1, 0xeb, 0xe5, 0xa0, 0xf4, 0xe8, 0xe5,
	0xa0, 0xf4, 0xf7, 0xef, 0xa0, 0xf7, 0xef, 0xf2,
	0xe4, 0xf3, 0xa0, 0xa2, 0xe6, 0xf5, 0xed, 0xe9,
	0xee, 0xe7, 0xa2, 0xa0, 0xe1, 0xee, 0xe4, 0x0d,
	0x00, 0x90, 0xf2, 0xe9, 0xef, 0xf5, 0xf3, 0xae,
	0xa2, 0xa0, 0xcd, 0x2b, 0x00, 0xf0, 0x02, 0xf5,
	0xf0, 0xa0, 0xf9, 0xef, 0xf5, 0xf2, 0xa0, 0xed,
	0xe9, 0xee, 0xe4, 0x8a, 0xf4, 0xe8, 0xe1, 0xf4,
	0x0f, 0x00, 0xe2, 0xa0, 0xf7, 0xe9, 0xec, 0xec,
	0xa0, 0xf3, 0xe1, 0xf9, 0xa0, 0xe2, 0xef, 0xf4,
	0xe8, 0x47, 0x00, 0xf9, 0x0f, 0xac, 0xa0, 0xe2,
	0xf5, 0xf4, 0xa0, 0xec, 0xe5, 0xe1, 0xf6, 0xe5,
	0xa0, 0xe9, 0xf4, 0xa0, 0xf5, 0xee, 0xf3, 0xe5,
	0xf4, 0xf4, 0xec, 0xe5, 0xe4, 0xa0, 0xf7, 0xe8,
	0xe9, 0xe3, 0xe8, 0x36, 0x00, 0xf3, 0x02, 0x8a,
	0xe6, 0xe9, 0xf2, 0xf3, 0xf4, 0xae, 0xa0, 0xa0,
	0xce, 0xef, 0xf7, 0xa0, 0xef, 0xf0, 0xe5, 0xee,
	0x63, 0x00, 0x41, 0xef, 0xf5, 0xf4, 0xe8, 0x85,
	0x00, 0xa2, 0xf3, 0xf0, 0xe5, 0xe1, 0xeb, 0xae,
	0xa0, 0xa0, 0xc9, 0xe6, 0x1a, 0x00, 0xf0, 0x0c,
	0xf4, 0xe8, 0xef, 0xf5, 0xe7, 0xe8, 0xf4, 0xf3,
	0xa0, 0xe9, 0xee, 0xe3, 0xec, 0xe9, 0xee, 0xe5,
	0xa0, 0xe5, 0xf6, 0xe5, 0xf2, 0xa0, 0xf3, 0xef,
	0x8a, 0xec, 0xe9, 0x64, 0x00, 0x57, 0xa0, 0xf4,
	0xef, 0xf7, 0xe1, 0xca, 0x00, 0x2a, 0xac, 0xa2,
	0xa5, 0x00, 0x03, 0x17, 0x00, 0x13, 0xad, 0xdb,
	0x00, 0x50, 0xbb, 0xa2, 0xa0, 0xe9, 0xe6, 0x04,
	0x01, 0xf8, 0x12, 0xf9, 0xa0, 0xf4, 0xf5, 0xf2,
	0xee, 0xac, 0xa0, 0xe2, 0xf9, 0x8a, 0xe5, 0xf6,
	0xe5, 0xee, 0xa0, 0xe1, 0xa0, 0xe8, 0xe1, 0xe9,
	0xf2, 0xa7, 0xf3, 0xa0, 0xe2, 0xf2, 0xe5, 0xe1,
	0xe4, 0xf4, 0xe8, 0xac, 0x59, 0x00, 0x01, 0x3b,
	0x00, 0x0f, 0x5a, 0x00, 0x00, 0x01, 0x18, 0x00,
	0x12, 0xad, 0x62, 0x00, 0x20, 0xbb, 0xa2, 0x05,
	0x01, 0x21, 0x8a, 0xe9, 0xb7, 0x00, 0x42, 0xa0,
	0xe8, 0xe1, 0xf6, 0x6b, 0x01, 0xf0, 0x11, 0xf2,
	0xe1, 0xf2, 0xe5, 0xf3, 0xf4, 0xa0, 0xef, 0xe6,
	0xa0, 0xe7, 0xe9, 0xe6, 0xf4, 0xf3, 0xac, 0xa0,
	0xe1, 0xa0, 0xf0, 0xe5, 0xf2, 0xe6, 0xe5, 0xe3,
	0xf4, 0xec, 0xf9, 0xa0, 0xe2, 0xe1, 0xec, 0x9a,
	0x01, 0x11, 0xe4, 0x62, 0x01, 0x1a, 0xac, 0x28,
	0x01, 0xc0, 0xa2, 0xe6, 0xf2, 0xf5, 0xed, 0xe9,
	0xef, 0xf5, 0xf3, 0xae, 0xa2, 0x8a,
      };
  static uint8_t data[800];
  __far uint8_t *res, *p;
  memset (data, 0xf6, sizeof (data));
  res = _lz4cpy (data, data_lz4, sizeof (data_lz4));
  printf ("%u\n", (unsigned) (res - data));
  for (p = data; p != res; ++p)
    putchar ((int) (*p ^ 0x80));
  for (; p != data + sizeof (data); ++p)
    if (*p != 0xf6)
      abort ();
  return 0;
}]],[[455
For instance, take the two words "fuming" and "furious." Make up your mind
that you will say both words, but leave it unsettled which you will say
first.  Now open your mouth and speak.  If your thoughts incline ever so
little towards "fuming," you will say "fuming-furious;" if they turn, by
even a hair's breadth, towards "furious," you will say "furious-fuming;" but
if you have the rarest of gifts, a perfectly balanced mind, you will say
"frumious."
]])
AT_CLEANUP

AT_SETUP([[_lz4len]])
AT_LIBI86_CHECK(dnl
[[#include <i86.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libi86/kompress.h>
int
main (void)
{
  static const uint8_t data_lz4[]
    = {
	0x1f, 0xf6, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xe6, 0x50, 0xf6, 0xf6, 0xf6,
	0xf6, 0xf6,
      };
  size_t n = _lz4len (_CV_FP (data_lz4), sizeof (data_lz4));
  printf ("%u\n", (unsigned) n);
  return 0;
}]],[[65280
]])
AT_CLEANUP
