dnl Copyright (c) 2018--2022 TK Chia
dnl
dnl Redistribution and use in source and binary forms, with or without
dnl modification, are permitted provided that the following conditions are
dnl met:
dnl
dnl   * Redistributions of source code must retain the above copyright
dnl     notice, this list of conditions and the following disclaimer.
dnl   * Redistributions in binary form must reproduce the above copyright
dnl     notice, this list of conditions and the following disclaimer in the
dnl     documentation and/or other materials provided with the distribution.
dnl   * Neither the name of the developer(s) nor the names of its
dnl     contributors may be used to endorse or promote products derived from
dnl     this software without specific prior written permission.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
dnl IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
dnl TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
dnl PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
dnl HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
dnl SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
dnl TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
dnl PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
dnl LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
dnl NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
dnl SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

AT_BANNER([[<dos.h> tests]])

AT_SETUP([[bdos]])
AT_LIBI86_CHECK_FOR_NEAR_DATA_MODEL(dnl
[[#include <dos.h>
int
main (void)
{
#ifdef __MSDOS__
  bdos (9, (unsigned) "Hello $(ignore this)", 0);
  bdos (2, '$', 0);
  bdos (2, 'f', 0);
  bdos (2, 'r', 0);
  bdos (2, 'o', 0);
  bdos (2, 'm', 0);
  bdos (2, '$', 0);
  bdos (9, (unsigned) " bdos!\r\n$(and ignore this too)", 0);
#else
# error
#endif
  return 0;
}]],[[Hello $from$ bdos!
]])
if "$at_arg_x_test_underlying" && test yes = "$ac_compiler_gnu"; then
AT_LIBI86_CHECK_CONSOLE_FOR_NONDOSX(dnl
[[
/*
 * A little test to see if the underlying DOS handles CP/M `call 5'...
 *
 * Note that, upon a `call 5', MS-DOS might actually _clobber_ the value of
 * %al before handing over to the int 0x21 syscall handler code.  (The
 * FreeDOS kernel passes %al unchanged.)  This means that the third
 * parameter to bdos (...) should be assumed to be ignored.  -- 20220221
 */
#ifndef __MSDOS__
# error
#endif
#undef _LIBI86_USE_BDOS_CALL5
#pragma GCC diagnostic ignored "-Wdeprecated"
#assert system (msdos bdos call5)
#pragma GCC diagnostic pop
#include <inttypes.h>
#include <dos.h>
#ifndef _LIBI86_USE_BDOS_CALL5
# error
#endif
void abort (void);
int
main (void)
{
  if ((uint8_t) bdos (1, 0xf6f6, 0xf6) != (uint8_t) '+')
    abort ();
  bdos (9, (unsigned) "Hello $(ignore this)", 0);
  bdos (2, '$', 0);
  bdos (2, 'w', 0);
  bdos (2, 'o', 0);
  bdos (2, 'r', 0);
  bdos (2, 'l', 0);
  bdos (2, 'd', 0);
  bdos (2, '\r', 0);
  bdos (2, '\n', 0);
  /* `call 5' should not handle any DOS functions above 0x24. */
  if ((uint8_t) bdos (0x30, 0, 1) != 0)
    abort ();
  if ((uint8_t) bdos (0x25, 0xffff, 0x21) != 0)
    abort ();
  return 0;
}]],[[+Hello $world
]],[[-input '\p200;+']])
fi
AT_CLEANUP

AT_SETUP([[intdos]])
AT_LIBI86_CHECK(dnl
[[#include <libi86/internal/acconfig.h>
#include <dos.h>
#include <string.h>
#include <unistd.h>
void abort (void);
int
main (void)
{
  union REGS regs;
#ifdef __MSDOS__
  memset (&regs, 0xf6, sizeof (regs));
  regs.h.ah = 0x02;
  regs.h.dl = 'y';
  intdos (&regs, &regs);
  /*
   * This is a bit of a kludge.  Assume that platforms that define O_TEXT in
   * <fcntl.h> will convert LF to CRLF on default upon a write (...) to
   * stdout, and platforms that do not define O_TEXT will not do this.
   */
# ifndef _LIBI86_INTERNAL_HAVE_O_TEXT
  write (1, "o\r\n", 3);
# else
  write (1, "o\n", 2);
# endif
  return 0;
#else
# error
#endif
}]],[[yo
]])
AT_LIBI86_CHECK_FOR_NEAR_DATA_MODEL(dnl
[[#include <dos.h>
void abort (void);
int
main (void)
{
  union REGS regs;
  int rv;
#ifdef __MSDOS__
  static char msg[] = "Hello from intdos!\r\n(ignore this part)";
  memset (&regs, 0xf6, sizeof (regs));
  regs.h.ah = 0x40;
  regs.w.bx = 1;
  regs.w.cx = 20;
  regs.w.dx = FP_OFF (_CV_FP (msg));
  rv = intdos (&regs, &regs);
  if (rv != 20 || regs.w.cflag)
    abort ();
  return 0;
#else
# error
#endif
}]],[[Hello from intdos!
]])
AT_CLEANUP

AT_SETUP([[intdosx]])
AT_LIBI86_CHECK(dnl
[[#include <libi86/internal/acconfig.h>
#include <dos.h>
#include <unistd.h>
void abort (void);
int
main (void)
{
  union REGS r;
  struct SREGS sr;
#ifdef __MSDOS__
  memset (&r, 0xf6, sizeof (r));
  memset (&sr, 0xf6, sizeof (sr));
  sr.ds = 1;
  sr.es = 2;
  r.h.ah = 0x02;
  r.h.dl = 'y';
  intdosx (&r, &r, &sr);
  if ((sr.ds & ~3u) != 0 || (sr.es & ~3u) != 0
# ifndef __IA16_CMODEL_IS_FAR_TEXT
      || sr.cs != __libi86_get_cs ()
# endif
      || sr.ss != __libi86_get_ss ())
    abort ();
# ifndef _LIBI86_INTERNAL_HAVE_O_TEXT
  write (1, "o\r\n", 3);
# else
  write (1, "o\n", 2);
# endif
  return 0;
#else
# error
#endif
}]],[[yo
]])
AT_LIBI86_CHECK_FOR_SMALL_MODEL_OR_ABOVE_NONDOSX(dnl
[[#include <dos.h>
#include <string.h>
#include <time.h>
#ifndef __MSDOS__
# error
#endif
void abort (void);
__far const char msg1[] = "hello world",
		 msg2[] = "s\r\nso I put a ",
		 msg3[] = " in your ";
static void
hw (void)
{
  union REGS r;
  struct SREGS sr;
  unsigned cookie = time (NULL);
  memset (&r, 0xf6, sizeof (r));
  memset (&sr, 0xf6, sizeof (sr));
  r.h.ah = 0x40;
  r.w.bx = 1;
  r.w.cx = sizeof (msg1) - 1;
  r.w.dx = FP_OFF (msg1);
  sr.ds = FP_SEG (msg1);
  sr.es = cookie;
  if (intdosx (&r, &r, &sr) != sizeof (msg1) - 1
      || r.w.ax != sizeof (msg1) - 1 || r.w.cflag
# ifndef __IA16_CMODEL_IS_FAR_TEXT
      || sr.cs != __libi86_get_cs ()
# endif
      || sr.ss != __libi86_get_ss ()
      || sr.ds != FP_SEG (msg1) || sr.es != cookie)
    abort ();
}
int
main (void)
{
  static __far const char msg4[] = "yo dawg I herd you like ",
			  msg5[] = "\r\nso you can $",
			  msg6[] = " while you ";
  const char __far *p;
  union REGS inr, outr;
  struct SREGS sr;
  memset (&inr, 0xf6, sizeof (inr));
  memset (&outr, 0xf6, sizeof (outr));
  memset (&sr, 0xf6, sizeof (sr));
  for (p = msg4; *p; ++p)
    bdos (2, *p, 0);
  hw ();
  inr.h.ah = 0x40;
  inr.w.bx = 1;
  inr.w.cx = sizeof (msg2) - 1;
  inr.w.dx = FP_OFF (msg2);
  sr.ds = FP_SEG (msg2);
  if (intdosx (&inr, &outr, &sr) != sizeof (msg2) - 1
      || outr.w.ax != sizeof (msg2) - 1 || outr.w.cflag)
    abort ();
  hw ();
  inr.w.cx = sizeof (msg3) - 1;
  inr.w.dx = FP_OFF (msg3);
  sr.ds = FP_SEG (msg3);
  if (intdosx (&inr, &outr, &sr) != sizeof (msg3) - 1
      || outr.w.ax != sizeof (msg3) - 1 || outr.w.cflag)
    abort ();
  hw ();
  inr.h.ah = 9;
  inr.w.dx = FP_OFF (msg5);
  sr.ds = FP_SEG (msg5);
  intdosx (&inr, &outr, &sr);
  hw ();
  inr.w.ax = 0x351a;
  intdosx (&inr, &outr, &sr);
  if (MK_FP (sr.es, outr.w.bx)
      != * (void __far * __far *) (unsigned long) (4 * 0x1a))
    abort ();
  for (p = msg6; *p; ++p)
    {
      inr.h.ah = 2;
      inr.h.dl = *p;
      memset (&sr, 0xf6, sizeof (sr));
      intdosx (&inr, &outr, &sr);
    }
  hw ();
  inr.h.ah = 0x40;
  inr.w.bx = 1;
  inr.w.cx = 2;
  inr.w.dx = FP_OFF (msg5);
  sr.ds = FP_SEG (msg5);
  if (intdosx (&inr, &outr, &sr) != 2 || outr.w.ax != 2 || outr.w.cflag)
    abort ();
  return 0;
}]],[[yo dawg I herd you like hello worlds
so I put a hello world in your hello world
so you can hello world while you hello world
]])
AT_CLEANUP

AT_SETUP([[_dos_close]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
#include <errno.h>
void abort (void);
int
main (int argc, char **argv)
{
  /* Try to close the stdin file descriptor.  This should succeed.  */
  if (_dos_close (0) != 0)
    abort ();

  /* Try to close the same file descriptor again.  This should fail.  */
  if (_dos_close (0) != EBADF)
    abort ();

  return 0;
}]],[[]])
AT_CLEANUP

AT_SETUP([[_dos_getdate, _dos_gettime]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
void abort (void);
int
main (void)
{
  struct dosdate_t date;
  struct dostime_t tyme;
  memset (&date, 0xf6, sizeof date);
  _dos_getdate (&date);
  if (date.day < 1 || date.day > 31)
    abort ();
  if (date.month < 1 || date.month > 12)
    abort ();
  if (date.year < 1980)
    abort ();
  if (date.dayofweek > 6)
    abort ();
  memset (&tyme, 0xf6, sizeof tyme);
  _dos_gettime (&tyme);
  if (tyme.hour > 24)
    abort ();
  if (tyme.minute > 59)
    abort ();
  if (tyme.second > 59)
    abort ();
  if (tyme.hsecond > 99)
    abort ();
  return 0;
}]],[[]])
AT_CLEANUP

AT_SETUP([[_dos_setdate]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
void abort (void);
int
main (void)
{
  struct dosdate_t date1, date2, date3;
  struct dostime_t tyme;
  do
    {
      memset (&tyme, 0xf6, sizeof tyme);
      _dos_gettime (&tyme);
    } while (tyme.second > 56);
  memset (&date1, 0xf6, sizeof date1);
  memset (&date2, 0xf6, sizeof date2);
  memset (&date3, 0xf6, sizeof date3);
  _dos_getdate (&date1);
  date2.year = 1980;
  date2.month = 1;
  date2.day = 1;
  if (_dos_setdate (&date2) != 0)
    abort ();
  _dos_getdate (&date3);
  if (_dos_setdate (&date1) != 0)
    abort ();
  if (date3.year != 1980 || date3.month != 1 || date3.day != 1)
    abort ();
  _dos_getdate (&date3);
  if (date3.year != date1.year || date3.month != date1.month
    || date3.day != date1.day)
    abort ();
  date2.year = 1980;
  date2.month = 0;
  date2.day = 0;
  if (_dos_setdate (&date2) == 0)
    abort ();
  _dos_getdate (&date3);
  if (date3.year != date1.year || date3.month != date1.month
    || date3.day != date1.day)
    abort ();
  return 0;
}]],[[]])
AT_CLEANUP

AT_SETUP([[_dos_getdiskfree]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
#include <errno.h>
void abort (void);
static int
is_power_of_2 (unsigned x)
{
  return x != 0 && (x & (x - 1)) == 0;
}
int
main (void)
{
  struct diskfree_t df;
  memset (&df, 0xf6, sizeof df);
  if (_dos_getdiskfree (0, &df) != 0)
    abort ();
  if (df.total_clusters < df.avail_clusters)
    abort ();
  if (! is_power_of_2 (df.sectors_per_cluster))
    abort ();
  if (! is_power_of_2 (df.bytes_per_sector))
    abort ();
  memset (&df, 0xf6, sizeof df);
  if (_dos_getdiskfree (~0U, &df) == 0)
    abort ();
  if (errno != EINVAL)
    abort ();
  return 0;
}]],[[]])
AT_CLEANUP

AT_SETUP([[_dos_getdrive, _dos_setdrive]])
AT_LIBI86_CHECK(dnl
[[#include <direct.h>
#include <dos.h>
void abort (void);
int
main (void)
{
  unsigned drive = 0xf6f6u, total = 0xf6f6, new_drive, new_total = 0xf6f6;
  _dos_getdrive (&drive);
  if (drive < 1 || drive > 0xff)
    abort ();
  if (drive != _getdrive ())
    abort ();
  _dos_setdrive (drive, &total);
  if (total < drive || total > 0xff)
    abort ();
  if (_getdrive () != drive)
    abort ();
  _dos_setdrive (0, &new_total);  /* this should do nothing */
  if (new_total != total)
    abort ();
  if (_getdrive () != drive)
    abort ();
  new_total = 0xf6f6;
  _dos_setdrive (total + 1, &new_total);  /* this should also do nothing */
  if (new_total != total)
    abort ();
  if (_getdrive () != drive)
    abort ();
  new_total = 0xf6f6;
  _dos_setdrive (drive + 0x100, &new_total);  /* this should also do nothing */
  if (new_total != total)
    abort ();
  if (_getdrive () != drive)
    abort ();
  for (new_drive = 1; new_drive <= drive; ++new_drive)
    {
      new_total = 0xf6f6;
      _dos_setdrive (new_drive, &new_total);  /* this should do something */
      if (new_total != total)
	abort ();
      if (_getdrive () != new_drive)
	abort ();
    }
  return 0;
}]],[[]])
AT_CLEANUP

AT_SETUP([[_dos_getfileattr]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
#include <errno.h>
#include <stdio.h>
void abort (void);
int
main (int argc, char **argv)
{
  unsigned attr1 = 0xccccu, attr2 = 0xe5e5u, attr3 = 0xf6f6u;
#ifdef __MSDOS__
  errno = 0;

  if (_dos_getfileattr (argv[0], &attr1) != 0)
    abort ();
  puts ("1 OK");
  if (errno)
    abort ();
  puts ("2 OK");
  if ((attr1 & (_A_VOLID | _A_SUBDIR)) != 0)
    abort ();
  puts ("3 OK");

  if (_dos_getfileattr (".", &attr2) != 0)
    abort ();
  puts ("4 OK");
  if (errno)
    abort ();
  puts ("5 OK");
  if ((attr2 & (_A_VOLID | _A_SUBDIR)) != _A_SUBDIR)
    abort ();
  puts ("6 OK");

  if (_dos_getfileattr ("nul", &attr3) != ENOENT)
    abort ();
  puts ("7 OK");
  if (errno != ENOENT)
    abort ();
  puts ("8 OK");

  return 0;
#else
# error
#endif
}]],[[1 OK
2 OK
3 OK
4 OK
5 OK
6 OK
7 OK
8 OK
]])
AT_CLEANUP

AT_SETUP([[_dos_setfileattr]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
#include <errno.h>
#include <stdio.h>
void abort (void);
int
main (int argc, char **argv)
{
  unsigned new_attr = 0;
#ifdef __MSDOS__
  errno = 0;

  if (_dos_setfileattr (argv[0], _A_RDONLY) != 0)
    abort ();
  puts ("1 OK");
  if (errno)
    abort ();
  puts ("2 OK");

  if (_dos_getfileattr (argv[0], &new_attr) != 0)
    abort ();
  puts ("3 OK");
  if ((new_attr & _A_RDONLY) == 0)
    abort ();
  puts ("4 OK");
  if ((new_attr & (_A_SUBDIR | _A_VOLID)) != 0)
    abort ();
  puts ("5 OK");

  switch (_dos_setfileattr ("nul", _A_RDONLY))
    {
      /*
       * MS-DOS says "Access denied" if a program tries to change the
       * attributes of the "nul" device file, while FreeDOS says "File not
       * found".
       */
    case ENOENT:
    case EACCES:
      break;
    default:
      abort ();
    }
  puts ("6 OK");
  if (errno != ENOENT && errno != EACCES)
    abort ();
  puts ("7 OK");

  if (_dos_setfileattr (argv[0], 0) != 0)
    abort ();
  puts ("8 OK");

  return 0;
#else
# error
#endif
}]],[[1 OK
2 OK
3 OK
4 OK
5 OK
6 OK
7 OK
8 OK
]])
AT_CLEANUP

AT_SETUP([[_dos_allocmem, _dos_freemem, _dos_setblock]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
#include <errno.h>
#include <stdio.h>
void abort (void);
int
main (int argc, char **argv)
{
  unsigned max_paras = 0, max_paras_2 = 0, max_paras_3 = 0, seg = 0, i;
#ifdef __FAR
  unsigned long __far *ptr = 0;
#endif
#ifdef __MSDOS__
  errno = 0;
  if (_dos_allocmem (0xffffu, &max_paras) != ENOMEM)
    abort ();
  puts ("1 OK");
  if (errno != ENOMEM)
    abort ();
  puts ("2 OK");
  if (! max_paras)
    abort ();
  puts ("3 OK");

  errno = 0;
  if (_dos_allocmem (max_paras, &seg) != 0)
    abort ();
  puts ("4 OK");
  if (errno)
    abort ();
  puts ("5 OK");
  if (! seg)
    abort ();
  puts ("6 OK");

#ifdef __FAR
  ptr = MK_FP (seg, 0);
  i = max_paras;
  if (i > 0x1000)
    i = 0x1000;
  while (i-- != 0)
    {
      *ptr++ = 0xf6f6f6f6ul;  *ptr++ = 0xf6f6f6f6ul;
      *ptr++ = 0xf6f6f6f6ul;  *ptr++ = 0xf6f6f6f6ul;
    }
#endif
  puts ("7 OK");

  if (_dos_setblock (0xffff, seg, &max_paras_2) != ENOMEM)
    abort ();
  puts ("8 OK");
  if (max_paras_2 < max_paras)
    abort ();
  puts ("9 OK");
  if (_dos_setblock (max_paras_2, seg, &max_paras_3) != 0)
    abort ();
  puts ("10 OK");

#ifdef __FAR
  ptr = MK_FP (seg, 0);
  i = max_paras;
  if (i > 0x1000)
    i = 0x1000;
  while (i-- != 0)
    {
      *ptr++ = 0xf6f6f6f6ul;  *ptr++ = 0xf6f6f6f6ul;
      *ptr++ = 0xf6f6f6f6ul;  *ptr++ = 0xf6f6f6f6ul;
    }
#endif
  puts ("11 OK");

#ifndef __IA16_FEATURE_PROTECTED_MODE
# ifdef __FAR
  if (max_paras > 0x1000)
    {
      ptr = MK_FP (seg + max_paras - 0x1000, 0);
      i = 0x1000;
      while (i-- != 0)
	{
	  *ptr++ = 0xf6f6f6f6ul;  *ptr++ = 0xf6f6f6f6ul;
	  *ptr++ = 0xf6f6f6f6ul;  *ptr++ = 0xf6f6f6f6ul;
	}
    }
# endif
#endif
  puts ("12 OK");

  errno = 0;
  if (_dos_freemem (seg) != 0)
    abort ();
  puts ("13 OK");
  if (errno)
    abort ();
  puts ("14 OK");

  return 0;
#else
# error
#endif
}]],[[1 OK
2 OK
3 OK
4 OK
5 OK
6 OK
7 OK
8 OK
9 OK
10 OK
11 OK
12 OK
13 OK
14 OK
]])
AT_CLEANUP

AT_SETUP([[_dos_findfirst, _dos_findnext, _dos_findclose]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
#include <errno.h>
#include <string.h>
void abort (void);
int
main (int argc, char **argv)
{
#ifdef __MSDOS__
  struct find_t find;
  memset (&find, 0xf6, sizeof find);
  /* This program should be able to find itself, exactly once... */
  if (_dos_findfirst (argv[0], _A_HIDDEN | _A_SYSTEM, &find) != 0)
    abort ();
  if ((find.attrib & (_A_VOLID | _A_SUBDIR)) != 0)
    abort ();
  if (_dos_findnext (&find) != 18)  /* "no more files" */
    abort ();
  if (_dos_findclose (&find) != 0)
    abort ();
  return 0;
#else
# error
#endif
}]],[[]])
AT_CLEANUP

AT_SETUP([[_dos_getvect]])
AT_LIBI86_CHECK_FOR_NONDOSX(dnl
[[#include <dos.h>
void abort (void);
int
main (void)
{
#ifdef __MSDOS__
  /*
   * Check that the interrupt 0x30 vector "address" is the start of a far
   * jump instruction.  This only works in real or V86 mode.
   */
  unsigned long vec_0x30 = (unsigned long) _dos_getvect (0x30);
  if ((unsigned char) vec_0x30 != 0xea)
    abort ();
  return 0;
#else
# error
#endif
}]],[[]])
AT_CLEANUP

AT_SETUP([[_dos_creat, _dos_creatnew, _dos_open]])
AT_LIBI86_CHECK_WITH_TMP_FILE(dnl
[[#include <dos.h>
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
void abort (void);
int
main (int argc, char **argv)
{
#ifdef __MSDOS__
  int fd = -1;
  char buf[1];
  static const char hello[5] = "hello";

  if (_dos_creatnew (argv[0], _A_NORMAL, &fd) == 0)
    abort ();
  puts ("1 OK");

  if (_dos_creatnew (TMP_FILE, _A_NORMAL, &fd) == 0)
    abort ();
  puts ("2 OK");

  if (_dos_open (TMP_FILE, O_WRONLY | O_NOINHERIT, &fd) != 0)
    abort ();
  puts ("3 OK");

  if (fd == -1)
    abort ();
  puts ("4 OK");

  /* read access should be denied */
  if (read (fd, buf, sizeof buf) >= 0)
    abort ();
  puts ("5 OK");

  /* write access should be allowed */
  if (write (fd, hello, sizeof hello) != sizeof hello)
    abort ();
  puts ("6 OK");

  if (_dos_close (fd) != 0)
    abort ();
  puts ("7 OK");

  if (_dos_creat (TMP_FILE, _A_NORMAL, &fd) != 0)
    abort ();
  puts ("8 OK");

  if (fd == -1)
    abort ();
  puts ("9 OK");

  /* file should now be truncated to zero bytes */
  if (lseek (fd, (off_t) 0, SEEK_END) != 0)
    abort ();
  puts ("10 OK");

  if (_dos_close (fd) != 0)
    abort ();
  puts ("11 OK");

  return 0;
#else
# error
#endif
}]],[[1 OK
2 OK
3 OK
4 OK
5 OK
6 OK
7 OK
8 OK
9 OK
10 OK
11 OK
]])
AT_CLEANUP

AT_SETUP([[_dos_read, _dos_getftime, _dos_setftime]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>

void abort (void);

static unsigned
MONTH (unsigned dt)
{
  return (dt >> 5) & 0xf;
}

static unsigned
HOUR (unsigned tm)
{
  return tm >> 11;
}

int
main (int argc, char **argv)
{
#ifdef __MSDOS__
  int fd = -1;
  const unsigned NEW_DATE = 48U << 9 | 8U << 5 | 8U,
		 NEW_TIME = 12U << 11 | 12U << 5 | 12U;
  unsigned buf, r = 0xf6f6, dt = 0xf6f6, tm = 0xf6f6,
			    dt2 = 0xf6f6, tm2 = 0xf6f6;

  if (_dos_open (argv[0], O_RDWR | O_NOINHERIT, &fd) != 0)
    abort ();
  puts ("1 OK");

  if (fd == -1)
    abort ();
  puts ("2 OK");

  if (_dos_read (fd, _CV_FP (&buf), sizeof buf, &r) != 0
      || r != sizeof buf)
    abort ();
  puts ("3 OK");

  if (_dos_getftime (fd, &dt, &tm) != 0)
    abort ();
  puts ("4 OK");

  if (HOUR (tm) > 24 || MONTH (dt) < 1 || MONTH (dt) > 12)
    abort ();
  puts ("5 OK");

  if (_dos_setftime (fd, NEW_DATE, NEW_TIME) != 0)
    abort ();
  puts ("6 OK");

  if (_dos_getftime (fd, &dt2, &tm2) != 0)
    abort ();
  puts ("7 OK");

  if (dt2 != NEW_DATE || tm2 != NEW_TIME)
    abort ();
  puts ("8 OK");

  if (_dos_close (fd) != 0)
    abort ();
  puts ("9 OK");

  return 0;
#else
# error
#endif
}]],[[1 OK
2 OK
3 OK
4 OK
5 OK
6 OK
7 OK
8 OK
9 OK
]])
AT_CLEANUP

AT_SETUP([[_dos_keep]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
void abort (void);
int
main (int argc, char **argv)
{
#ifdef __MSDOS__
  if (argc)
    _dos_keep (0, 0x10);
  abort ();
  return 1;
#else
# error
#endif
}]],[])
AT_CLEANUP

AT_SETUP([[dosexterr]])
AT_LIBI86_CHECK_WITH_TMP_FILE(dnl
[[#include <dos.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
void abort (void);
int
main (void)
{
  struct _DOSERROR err;
  int fd;
#ifndef __ACK  /* As of Jan 2022, ACK does not have unlink (.) yet :-| */
  if (unlink (TMP_FILE) != 0)
    abort ();
  if (unlink (TMP_FILE) == 0)
    abort ();
  if (errno != ENOENT)
    abort ();
  memset (&err, 0xf6, sizeof err);
  /*
   * Unlike MS-DOS, FreeDOS does not set the other extended error fields
   * upon an "ordinary" DOS error.  Should it do so?
   */
  if (dosexterr (&err) != 2)
    abort ();
  if (err.exterror != 2)
    abort ();
  if (_dos_creatnew (TMP_FILE, _A_NORMAL, &fd) != 0)
    abort ();
  _dos_close (fd);
#endif
  if (_dos_creatnew (TMP_FILE, _A_NORMAL, &fd) != 0x50)  /* file exists */
    abort ();
  memset (&err, 0xf6, sizeof err);
  if (dosexterr (&err) != 0x50)
    abort ();
  if (err.exterror != 0x50)
    abort ();
  return 0;
}]],[])
AT_CLEANUP

AT_SETUP([[_parsfnm]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>

void abort (void);

/*
 * Compare only up to the logical record size field of the FCB --- MS-DOS
 * only fills the FCB up to that point.
 */
#define CMP_SZ	offsetof (struct _fcb, _fcb_filsize)

int
main (void)
{
  static const char name1[] = "?:",
		    name2[] = "a:foO*.bAr",
		    name3[] = "baz\r";
  static const struct _fcb expect_fcb2 = { 1, "FOO?????", "BAR", 0, 0, },
			   expect_fcb3 = { 1, "BAZ     ", "BAR", 0, 0, };
  struct _fcb fcb;
  char *res;

  memset (&fcb, 0xf6, sizeof fcb);
  if (_parsfnm (name1, &fcb, 0) != NULL)
    abort ();
  puts ("1 OK");

  memset (&fcb, 0xf6, sizeof fcb);
  res = _parsfnm (name2, &fcb, 0);
  if (res != name2 + strlen (name2))
    {
      printf ("%u: %p != %p\n", __LINE__, res, name2 + strlen (name2));
      abort ();
    }
  if (memcmp (&fcb, &expect_fcb2, CMP_SZ) != 0)
    {
      printf ("%u: drive %c name \"%.8s\" ext \"%.3s\"\n",
	      __LINE__, 'A' - 1 + fcb._fcb_drive, fcb._fcb_name, fcb._fcb_ext);
      abort ();
    }
  puts ("2 OK");

  res = _parsfnm (name3, &fcb, 1 << 3 | 1 << 1);
  if (res != name3 + strlen (name3) - 1)
    {
      printf ("%u: %p != %p\n", __LINE__, res, name3 + strlen (name3) - 1);
      abort ();
    }
  if (memcmp (&fcb, &expect_fcb3, CMP_SZ) != 0)
    {
      printf ("%u: drive %c name \"%.8s\" ext \"%.3s\"\n",
	      __LINE__, 'A' - 1 + fcb._fcb_drive, fcb._fcb_name, fcb._fcb_ext);
      abort ();
    }
  puts ("3 OK");

  return 0;
}]],[[1 OK
2 OK
3 OK
]])
AT_CLEANUP
