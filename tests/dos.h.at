dnl Copyright (c) 2018--2019 TK Chia
dnl
dnl This file is free software; you can redistribute it and/or modify it
dnl under the terms of the GNU Lesser General Public License as published by
dnl the Free Software Foundation; either version 3 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public License
dnl along with this program; see the file COPYING3.LIB.  If not see
dnl <http://www.gnu.org/licenses/>.

AT_BANNER([[<dos.h> tests]])

AT_SETUP([[bdos, bdosptr]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
int
main (void)
{
#ifdef __MSDOS__
  bdosptr (9, "Hello $(ignore this)", 0);
  bdos (2, '$', 0);
  bdos (2, 'f', 0);
  bdos (2, 'r', 0);
  bdos (2, 'o', 0);
  bdos (2, 'm', 0);
  bdos (2, '$', 0);
  bdosptr (9, " bdos and bdosptr!\r\n$(and ignore this too)", 0);
#else
# error
#endif
  return 0;
}]],[[Hello $from$ bdos and bdosptr!
]])
AT_CLEANUP

AT_SETUP([[intdos]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
void abort (void);
int
main (void)
{
  union REGS regs;
  int rv;
#ifdef __MSDOS__
  regs.h.ah = 0x02;
  regs.h.dl = 'y';
  intdos (&regs, &regs);
  write (1, "o\r\n", 3);
  return 0;
#else
# error
#endif
}]],[[yo
]])
AT_LIBI86_CHECK_FOR_NEAR_DATA_MODEL_NONDPMIABLE(dnl
[[#include <dos.h>
void abort (void);
int
main (void)
{
  union REGS regs;
  int rv;
#ifdef __MSDOS__
  static char msg[] = "Hello from intdos!\r\n(ignore this part)";
  regs.h.ah = 0x40;
  regs.w.bx = 1;
  regs.w.cx = 20;
  regs.w.dx = FP_OFF (msg);
  rv = intdos (&regs, &regs);
  if (rv != 20)
    abort ();
  return 0;
#else
# error
#endif
}]],[[Hello from intdos!
]])
AT_CLEANUP

AT_SETUP([[intdosx]])
AT_LIBI86_CHECK(dnl
[[#include <dos.h>
#include <unistd.h>
void abort (void);
static unsigned
get_cs (void)
{
  unsigned v;
  __asm volatile ("movw %%cs, %0" : "=r" (v));
  return v;
}
static unsigned
get_ss (void)
{
  unsigned v;
  __asm volatile ("movw %%ss, %0" : "=r" (v));
  return v;
}
int
main (void)
{
  union REGS r;
  struct SREGS sr;
#ifdef __MSDOS__
  sr.ds = 1;
  sr.es = 2;
  r.h.ah = 0x02;
  r.h.dl = 'y';
  intdosx (&r, &r, &sr);
  if ((sr.ds & ~3u) != 0 || (sr.es & ~3u) != 0
# ifndef __IA16_CMODEL_IS_FAR_TEXT
      || sr.cs != get_cs ()
# endif
      || sr.ss != get_ss ())
    abort ();
  write (1, "o\r\n", 3);
  return 0;
#else
# error
#endif
}]],[[yo
]])
AT_LIBI86_CHECK_FOR_SMALL_MODEL_OR_ABOVE_NONDPMIABLE(dnl
[[#include <dos.h>
#include <string.h>
#include <time.h>
#ifndef __MSDOS__
# error
#endif
void abort (void);
__far const char msg1[] = "hello world",
		 msg2[] = "s\r\nso I put a ",
		 msg3[] = " in your ";
static unsigned
get_cs (void)
{
  unsigned v;
  __asm volatile ("movw %%cs, %0" : "=r" (v));
  return v;
}
static unsigned
get_ss (void)
{
  unsigned v;
  __asm volatile ("movw %%ss, %0" : "=r" (v));
  return v;
}
static void
hw (void)
{
  union REGS r;
  struct SREGS sr;
  unsigned cookie = time (NULL);
  r.h.ah = 0x40;
  r.w.bx = 1;
  r.w.cx = sizeof (msg1) - 1;
  r.w.dx = FP_OFF (msg1);
  sr.ds = FP_SEG (msg1);
  sr.es = cookie;
  if (intdosx (&r, &r, &sr) != sizeof (msg1) - 1
      || r.w.ax != sizeof (msg1) - 1
# ifndef __IA16_CMODEL_IS_FAR_TEXT
      || sr.cs != get_cs ()
# endif
      || sr.ss != get_ss () || sr.ds != FP_SEG (msg1) || sr.es != cookie)
    abort ();
}
int
main (void)
{
  static __far const char msg4[] = "yo dawg I herd you like ",
			  msg5[] = "\r\nso you can $",
			  msg6[] = " while you ";
  const char __far *p;
  union REGS inr, outr;
  struct SREGS sr;
  for (p = msg4; *p; ++p)
    bdos (2, *p, 0);
  hw ();
  inr.h.ah = 0x40;
  inr.w.bx = 1;
  inr.w.cx = sizeof (msg2) - 1;
  inr.w.dx = FP_OFF (msg2);
  sr.ds = FP_SEG (msg2);
  if (intdosx (&inr, &outr, &sr) != sizeof (msg2) - 1
      || outr.w.ax != sizeof (msg2) - 1)
    abort ();
  hw ();
  inr.w.cx = sizeof (msg3) - 1;
  inr.w.dx = FP_OFF (msg3);
  sr.ds = FP_SEG (msg3);
  if (intdosx (&inr, &outr, &sr) != sizeof (msg3) - 1
      || outr.w.ax != sizeof (msg3) - 1)
    abort ();
  hw ();
  inr.h.ah = 9;
  inr.w.dx = FP_OFF (msg5);
  sr.ds = FP_SEG (msg5);
  intdosx (&inr, &outr, &sr);
  hw ();
  inr.w.ax = 0x351a;
  intdosx (&inr, &outr, &sr);
  if (MK_FP (sr.es, outr.w.bx)
      != * (void __far * __far *) (unsigned long) (4 * 0x1a))
    abort ();
  for (p = msg6; *p; ++p)
    {
      inr.h.ah = 2;
      inr.h.dl = *p;
      memset (&sr, 0xf6, sizeof (sr));
      intdosx (&inr, &outr, &sr);
    }
  hw ();
  inr.h.ah = 0x40;
  inr.w.bx = 1;
  inr.w.cx = 2;
  inr.w.dx = FP_OFF (msg5);
  sr.ds = FP_SEG (msg5);
  if (intdosx (&inr, &outr, &sr) != 2 || outr.w.ax != 2)
    abort ();
  return 0;
}]],[[yo dawg I herd you like hello worlds
so I put a hello world in your hello world
so you can hello world while you hello world
]])
AT_CLEANUP
